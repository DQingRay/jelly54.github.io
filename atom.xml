<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爱吃jelly的Jelly</title>
  
  <subtitle>就揪啾  就是 Jelly</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jelly54.github.io/"/>
  <updated>2018-11-19T06:59:58.194Z</updated>
  <id>https://jelly54.github.io/</id>
  
  <author>
    <name>Big Jelly</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode-392-判断子序列</title>
    <link href="https://jelly54.github.io/2018/11/19/LeetCode-392-%E5%88%A4%E6%96%AD%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <id>https://jelly54.github.io/2018/11/19/LeetCode-392-判断子序列/</id>
    <published>2018-11-19T06:41:28.000Z</published>
    <updated>2018-11-19T06:59:58.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="判断子序列"><a href="#判断子序列" class="headerlink" title="判断子序列"></a>判断子序列</h1><p><a href="https://leetcode-cn.com/problems/is-subsequence/" target="_blank" rel="noopener">LeetCode-392-判断子序列</a></p><blockquote><p>给定字符串 s 和 t ，判断 s 是否为 t 的子序列。</p><p>你可以认为 s 和 t 中仅包含英文小写字母。字符串 t 可能会很长（长度 ~= 500,000），而 s 是个短字符串（长度 &lt;=100）。</p></blockquote><a id="more"></a><blockquote><p>字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，”ace”是”abcde”的一个子序列，而”aec”不是）。</p></blockquote><p><strong>示例 1:</strong></p><ul><li><p>s = “abc”, t = “ahbgdc”</p></li><li><p>返回 true.</p></li></ul><p><strong>示例 2:</strong></p><ul><li><p>s = “axc”, t = “ahbgdc”</p></li><li><p>返回 false.</p></li></ul><p><strong>后续挑战 :</strong></p><p style="text-indent: 2em">如果有大量输入的 S，称作S1, S2, … , Sk 其中 k &gt;= 10亿,你需要依次检查它们是否为 T 的子序列。</p><br><p style="text-indent: 2em">在这种情况下，你会怎样改变代码？</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubsequence</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">        index = t.indexOf(c, index + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度: O(N)</p></li><li><p>空间复杂度：O(1)</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;判断子序列&quot;&gt;&lt;a href=&quot;#判断子序列&quot; class=&quot;headerlink&quot; title=&quot;判断子序列&quot;&gt;&lt;/a&gt;判断子序列&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/is-subsequence/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-392-判断子序列&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定字符串 s 和 t ，判断 s 是否为 t 的子序列。&lt;/p&gt;
&lt;p&gt;你可以认为 s 和 t 中仅包含英文小写字母。字符串 t 可能会很长（长度 ~= 500,000），而 s 是个短字符串（长度 &amp;lt;=100）。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="贪心思想" scheme="https://jelly54.github.io/tags/%E8%B4%AA%E5%BF%83%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-605-种花问题</title>
    <link href="https://jelly54.github.io/2018/11/19/LeetCode-605-%E7%A7%8D%E8%8A%B1%E9%97%AE%E9%A2%98/"/>
    <id>https://jelly54.github.io/2018/11/19/LeetCode-605-种花问题/</id>
    <published>2018-11-19T06:34:51.000Z</published>
    <updated>2018-11-19T06:59:29.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="种花问题"><a href="#种花问题" class="headerlink" title="种花问题"></a>种花问题</h1><p><a href="https://leetcode-cn.com/problems/can-place-flowers/" target="_blank" rel="noopener">LeetCode-605-种花问题</a></p><blockquote><p>假设你有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花卉不能种植在相邻的地块上，它们会争夺水源，两者都会死去。</p></blockquote><blockquote><p>给定一个花坛（表示为一个数组包含0和1，其中0表示没种植花，1表示种植了花），和一个数 n 。能否在不打破种植规则的情况下种入 n 朵花？能则返回True，不能则返回False。</p></blockquote><a id="more"></a><p><strong>示例 1:</strong></p><ul><li><p>输入: flowerbed = [1,0,0,0,1], n = 1</p></li><li><p>输出: True</p></li></ul><p><strong>示例 2:</strong></p><ul><li><p>输入: flowerbed = [1,0,0,0,1], n = 2</p></li><li><p>输出: False</p></li></ul><p><strong>注意:</strong></p><ol><li>数组内已种好的花不会违反种植规则。</li><li>输入的数组长度范围为 [1, 20000]。</li><li>n 是非负整数，且不会超过输入数组的大小。</li></ol><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><blockquote><p>花朵之间至少需要一个单位的间隔，求解是否能种下 n 朵花。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canPlaceFlowers</span><span class="params">(<span class="keyword">int</span>[] flowerbed, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = flowerbed.length;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len &amp;&amp; cnt &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (flowerbed[i] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> pre = i == <span class="number">0</span> ? <span class="number">0</span> : flowerbed[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> next = i == len - <span class="number">1</span> ? <span class="number">0</span> : flowerbed[i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (pre == <span class="number">0</span> &amp;&amp; next == <span class="number">0</span>) &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            flowerbed[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt &gt;= n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：O()</p></li><li><p>空间复杂度：O()</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;种花问题&quot;&gt;&lt;a href=&quot;#种花问题&quot; class=&quot;headerlink&quot; title=&quot;种花问题&quot;&gt;&lt;/a&gt;种花问题&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/can-place-flowers/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-605-种花问题&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假设你有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花卉不能种植在相邻的地块上，它们会争夺水源，两者都会死去。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个花坛（表示为一个数组包含0和1，其中0表示没种植花，1表示种植了花），和一个数 n 。能否在不打破种植规则的情况下种入 n 朵花？能则返回True，不能则返回False。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="贪心思想" scheme="https://jelly54.github.io/tags/%E8%B4%AA%E5%BF%83%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-406-根据身高重建队列</title>
    <link href="https://jelly54.github.io/2018/11/19/LeetCode-406-%E6%A0%B9%E6%8D%AE%E8%BA%AB%E9%AB%98%E9%87%8D%E5%BB%BA%E9%98%9F%E5%88%97/"/>
    <id>https://jelly54.github.io/2018/11/19/LeetCode-406-根据身高重建队列/</id>
    <published>2018-11-19T06:19:24.000Z</published>
    <updated>2018-11-19T06:58:57.089Z</updated>
    
    <content type="html"><![CDATA[<h1 id="根据身高重建队列"><a href="#根据身高重建队列" class="headerlink" title="根据身高重建队列"></a>根据身高重建队列</h1><p><a href="https://leetcode-cn.com/problems/queue-reconstruction-by-height/" target="_blank" rel="noopener">LeetCode-406-根据身高重建队列</a></p><blockquote><p>假设有打乱顺序的一群人站成一个队列。 每个人由一个整数对(h, k)表示，其中h是这个人的身高，k是排在这个人前面且身高大于或等于h的人数。 编写一个算法来重建这个队列。</p></blockquote><a id="more"></a><p><strong>注意：</strong><br>总人数少于1100人。</p><p><strong>示例</strong></p><ul><li><p>输入: [[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]</p></li><li><p>输出: [[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]</p></li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><blockquote><p>一个学生用两个分量 (h, k) 描述，h 表示身高，k 表示排在前面的有 k 个学生的身高比他高或者和他一样高。</p><p><strong>为了使插入操作不影响后续的操作，身高较高的学生应该先做插入操作，否则身高较小的学生原先正确插入的第 k 个位置可能会变成第 k+1 个位置。</strong></p><p><strong>身高降序、k 值升序，</strong> 然后按排好序的顺序插入队列的第 k 个位置中</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[][] reconstructQueue(<span class="keyword">int</span>[][] people) &#123;</span><br><span class="line">    <span class="keyword">if</span> (people == <span class="keyword">null</span> || people.length == <span class="number">0</span> || people[<span class="number">0</span>].length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    Arrays.sort(people, (a, b) -&gt; (a[<span class="number">0</span>] == b[<span class="number">0</span>] ? a[<span class="number">1</span>] - b[<span class="number">1</span>] : b[<span class="number">0</span>] - a[<span class="number">0</span>]));</span><br><span class="line">    List&lt;<span class="keyword">int</span>[]&gt; queue = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>[] p : people) &#123;</span><br><span class="line">        queue.add(p[<span class="number">1</span>], p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> queue.toArray(<span class="keyword">new</span> <span class="keyword">int</span>[queue.size()][]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：O(N*logN)</p></li><li><p>空间复杂度：O(N)</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;根据身高重建队列&quot;&gt;&lt;a href=&quot;#根据身高重建队列&quot; class=&quot;headerlink&quot; title=&quot;根据身高重建队列&quot;&gt;&lt;/a&gt;根据身高重建队列&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/queue-reconstruction-by-height/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-406-根据身高重建队列&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假设有打乱顺序的一群人站成一个队列。 每个人由一个整数对(h, k)表示，其中h是这个人的身高，k是排在这个人前面且身高大于或等于h的人数。 编写一个算法来重建这个队列。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="贪心思想" scheme="https://jelly54.github.io/tags/%E8%B4%AA%E5%BF%83%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-435-无重叠区间</title>
    <link href="https://jelly54.github.io/2018/11/19/LeetCode-435-%E6%97%A0%E9%87%8D%E5%8F%A0%E5%8C%BA%E9%97%B4/"/>
    <id>https://jelly54.github.io/2018/11/19/LeetCode-435-无重叠区间/</id>
    <published>2018-11-19T06:06:17.000Z</published>
    <updated>2018-11-19T06:58:17.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="不重叠区间"><a href="#不重叠区间" class="headerlink" title="不重叠区间"></a>不重叠区间</h1><p><a href="https://leetcode-cn.com/problems/non-overlapping-intervals/" target="_blank" rel="noopener">LeetCode-435-无重叠区间</a></p><blockquote><p>给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。</p></blockquote><a id="more"></a><p><strong>注意:</strong></p><blockquote><p>可以认为区间的终点总是大于它的起点。<br>区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。</p></blockquote><p><strong>示例 1:</strong></p><ul><li>输入: [ [1,2], [2,3], [3,4], [1,3] ]</li><li>输出: 1</li></ul><p><strong>解释:</strong>  移除 [1,3] 后，剩下的区间没有重叠。</p><p><strong>示例 2:</strong></p><ul><li>输入: [ [1,2], [1,2], [1,2] ]</li><li>输出: 2</li></ul><p><strong>解释:</strong> 你需要移除两个 [1,2] 来使剩下的区间没有重叠。</p><p><strong>示例 3:</strong></p><ul><li>输入: [ [1,2], [2,3] ]</li><li>输出: 0</li></ul><p><strong>解释:</strong>  你不需要移除任何区间，因为它们已经是无重叠的了。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><blockquote><p>先计算最多能组成的不重叠区间个数，然后用区间总个数减去不重叠区间的个数。</p><p>在每次选择中，区间的结尾最为重要，选择的区间结尾越小，留给后面的区间的空间越大，那么后面能够选择的区间个数也就越大。</p><p>按区间的结尾进行排序，每次选择结尾最小，并且和前一个区间不重叠的区间。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for an interval.</span></span><br><span class="line"><span class="comment"> * public class Interval &#123;</span></span><br><span class="line"><span class="comment"> *     int start;</span></span><br><span class="line"><span class="comment"> *     int end;</span></span><br><span class="line"><span class="comment"> *     Interval() &#123; start = 0; end = 0; &#125;</span></span><br><span class="line"><span class="comment"> *     Interval(int s, int e) &#123; start = s; end = e; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">eraseOverlapIntervals</span><span class="params">(Interval[] intervals)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(intervals.length == <span class="number">0</span>)</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     Arrays.sort(intervals, Comparator.comparingInt(o -&gt; o.end));</span><br><span class="line">      <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> end = intervals[<span class="number">0</span>].end;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;intervals.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(intervals[i].start &lt; end)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            end = intervals[i].end;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> intervals.length - cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 lambda 表示式创建 Comparator 会导致算法运行时间过长，<br>如果注重运行时间，可以修改为普通创建 Comparator 语句：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arrays.sort(intervals, <span class="keyword">new</span> Comparator&lt;Interval&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Interval o1, Interval o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o1.end - o2.end;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度： O(N*logN)</p></li><li><p>空间复杂度： O(1)</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;不重叠区间&quot;&gt;&lt;a href=&quot;#不重叠区间&quot; class=&quot;headerlink&quot; title=&quot;不重叠区间&quot;&gt;&lt;/a&gt;不重叠区间&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/non-overlapping-intervals/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-435-无重叠区间&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="贪心思想" scheme="https://jelly54.github.io/tags/%E8%B4%AA%E5%BF%83%E6%80%9D%E6%83%B3/"/>
    
      <category term="不重叠区间" scheme="https://jelly54.github.io/tags/%E4%B8%8D%E9%87%8D%E5%8F%A0%E5%8C%BA%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-452-用最少数量的箭引爆气球</title>
    <link href="https://jelly54.github.io/2018/11/13/LeetCode-452-%E7%94%A8%E6%9C%80%E5%B0%91%E6%95%B0%E9%87%8F%E7%9A%84%E7%AE%AD%E5%BC%95%E7%88%86%E6%B0%94%E7%90%83/"/>
    <id>https://jelly54.github.io/2018/11/13/LeetCode-452-用最少数量的箭引爆气球/</id>
    <published>2018-11-13T07:18:56.000Z</published>
    <updated>2018-11-13T08:35:23.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用最少数量的箭引爆气球"><a href="#用最少数量的箭引爆气球" class="headerlink" title="用最少数量的箭引爆气球"></a>用最少数量的箭引爆气球</h1><p><a href="https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/" target="_blank" rel="noopener">LeetCode-cn-452-用最少数量的箭引爆气球</a></p><blockquote><p>在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。由于它是水平的，所以y坐标并不重要，因此只要知道开始和结束的x坐标就足够了。开始坐标总是小于结束坐标。平面内最多存在104个气球。</p></blockquote><a id="more"></a><blockquote><p>一支弓箭可以沿着x轴从不同点完全垂直地射出。在坐标x处射出一支箭，若有一个气球的直径的开始和结束坐标为 xstart，xend， 且满足  xstart ≤ x ≤ xend，则该气球会被引爆。可以射出的弓箭的数量没有限制。 弓箭一旦被射出之后，可以无限地前进。我们想找到使得所有气球全部被引爆，所需的弓箭的最小数量。</p></blockquote><p><strong>Example:</strong> </p><ul><li>输入: [[10,16], [2,8], [1,6], [7,12]]</li><li>输出: 2</li></ul><p><strong>解释:</strong><br>对于该样例，我们可以在x = 6（射爆[2,8],[1,6]两个气球）和 x = 11（射爆另外两个气球）。  </p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><blockquote><p><strong>题目描述：</strong> 计算让一组区间不重叠所需要移除的区间个数。  </p></blockquote><blockquote><p>先计算最多能组成的不重叠区间个数，然后用区间总个数减去不重叠区间的个数。  </p></blockquote><blockquote><p>在每次选择中，<strong>区间的结尾最为重要</strong> 选择的区间结尾越小，留给后面的区间的空间越大，那么后面能够选择的区间个数也就越大。  </p></blockquote><blockquote><p><strong>按区间的结尾进行排序</strong> ，每次选择 <strong>结尾最小，并且和前一个区间不重叠的区间</strong> </p></blockquote><pre><code class="java"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMinArrowShots</span><span class="params">(<span class="keyword">int</span>[][] points)</span> </span>{        <span class="keyword">if</span> (points.length == <span class="number">0</span>) {            <span class="keyword">return</span> <span class="number">0</span>;        }        Arrays.sort(points,<span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;() {            <span class="meta">@Override</span>            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] p1, <span class="keyword">int</span>[] p2)</span> </span>{                <span class="keyword">return</span> p1[<span class="number">1</span>] - p2[<span class="number">1</span>];            }        });        <span class="keyword">int</span> cnt = <span class="number">1</span>, end = points[<span class="number">0</span>][<span class="number">1</span>];        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; points.length; i++) {            <span class="keyword">if</span> (points[i][<span class="number">0</span>] &lt;= end) {                <span class="keyword">continue</span>;            }            cnt++;            end = points[i][<span class="number">1</span>];        }        <span class="keyword">return</span> cnt;    }}</code></pre><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度： O(N*logN)</p></li><li><p>空间复杂度： O(1)</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;用最少数量的箭引爆气球&quot;&gt;&lt;a href=&quot;#用最少数量的箭引爆气球&quot; class=&quot;headerlink&quot; title=&quot;用最少数量的箭引爆气球&quot;&gt;&lt;/a&gt;用最少数量的箭引爆气球&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-cn-452-用最少数量的箭引爆气球&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。由于它是水平的，所以y坐标并不重要，因此只要知道开始和结束的x坐标就足够了。开始坐标总是小于结束坐标。平面内最多存在104个气球。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="贪心思想" scheme="https://jelly54.github.io/tags/%E8%B4%AA%E5%BF%83%E6%80%9D%E6%83%B3/"/>
    
      <category term="不重叠区间" scheme="https://jelly54.github.io/tags/%E4%B8%8D%E9%87%8D%E5%8F%A0%E5%8C%BA%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-455-分发饼干</title>
    <link href="https://jelly54.github.io/2018/11/13/LeetCode-455-%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2/"/>
    <id>https://jelly54.github.io/2018/11/13/LeetCode-455-分发饼干/</id>
    <published>2018-11-13T07:05:05.000Z</published>
    <updated>2018-11-13T08:36:18.733Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分发饼干"><a href="#分发饼干" class="headerlink" title="分发饼干"></a>分发饼干</h1><p><a href="347-前K个高频元素">LeetCode-cn-455-分发饼干</a></p><blockquote><p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。对每个孩子 i ，都有一个胃口值 gi ，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j ，都有一个尺寸 sj 。如果 sj &gt;= gi ，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p></blockquote><a id="more"></a><p><strong>注意：</strong>  </p><p style="text-indent: 2em">你可以假设胃口值为正。</p><br><p style="text-indent: 2em">一个小朋友最多只能拥有一块饼干。</p><p><strong>示例 1:</strong>  </p><ul><li>输入: [1,2,3], [1,1]</li><li>输出: 1</li></ul><p><strong>解释: </strong><br>你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。<br>虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。<br>所以你应该输出1。  </p><p><strong>示例 2:</strong>  </p><ul><li>输入: [1,2], [1,2,3]</li><li>输出: 2</li></ul><p><strong>解释: </strong><br>你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。<br>你拥有的饼干数量和尺寸都足以让所有孩子满足。<br>所以你应该输出2.  </p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：贪心思想"><a href="#方法一：贪心思想" class="headerlink" title="方法一：贪心思想"></a>方法一：贪心思想</h3><blockquote><p><strong>题目描述：</strong> 每个孩子都有一个满足度，每个饼干都有一个大小，只有饼干的大小大于等于一个孩子的满足度，该孩子才会获得满足。求解最多可以获得满足的孩子数量。</p><p>给一个孩子的饼干 <strong>应当尽量小又能满足该孩子</strong> ，这样大饼干就能拿来给满足度比较大的孩子。 <strong>因为最小的孩子最容易得到满足</strong> ，所以先满足最小的孩子。</p><p><strong>证明：</strong> 假设在某次选择中，<strong>贪心策略选择给当前满足度最小的孩子分配第 m 个饼干，第 m 个饼干为可以满足该孩子的最小饼干。</strong> 假设 <strong>存在一种最优策略，给该孩子分配第 n 个饼干，并且 m &lt; n。</strong> 我们可以发现，经过这一轮分配，<strong>贪心策略分配后剩下的饼干一定有一个比最优策略来得大。</strong> 因此在后续的分配中，<strong>贪心策略一定能满足更多的孩子。</strong><br>也就是说不存在比贪心策略更优的策略，即贪心策略就是最优策略。  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findContentChildren</span><span class="params">(<span class="keyword">int</span>[] g, <span class="keyword">int</span>[] s)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(g);</span><br><span class="line">        Arrays.sort(s);</span><br><span class="line">        <span class="keyword">int</span> gi = <span class="number">0</span>, si = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(gi &lt; g.length &amp;&amp; si &lt; s.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(g[gi] &lt;= s[si])&#123;</span><br><span class="line">                gi++;</span><br><span class="line">            &#125;</span><br><span class="line">            si++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> gi;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度： O(N*logN)</p></li><li><p>空间复杂度： O(1)</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;分发饼干&quot;&gt;&lt;a href=&quot;#分发饼干&quot; class=&quot;headerlink&quot; title=&quot;分发饼干&quot;&gt;&lt;/a&gt;分发饼干&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;347-前K个高频元素&quot;&gt;LeetCode-cn-455-分发饼干&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。对每个孩子 i ，都有一个胃口值 gi ，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j ，都有一个尺寸 sj 。如果 sj &amp;gt;= gi ，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="贪心思想" scheme="https://jelly54.github.io/tags/%E8%B4%AA%E5%BF%83%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-75-颜色分类</title>
    <link href="https://jelly54.github.io/2018/11/13/LeetCode-075-%E9%A2%9C%E8%89%B2%E5%88%86%E7%B1%BB/"/>
    <id>https://jelly54.github.io/2018/11/13/LeetCode-075-颜色分类/</id>
    <published>2018-11-13T06:44:11.000Z</published>
    <updated>2018-11-13T08:32:54.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="颜色分类"><a href="#颜色分类" class="headerlink" title="颜色分类"></a>颜色分类</h1><p><a href="https://leetcode-cn.com/problems/sort-colors/" target="_blank" rel="noopener">LeetCode-cn-75-颜色分类</a></p><blockquote><p>给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p><p>此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。</p></blockquote><a id="more"></a><p><strong>注意:</strong><br><strong>不能使用代码库中的排序函数来解决这道题。</strong></p><p><strong>示例:</strong>  </p><ul><li>输入: [2,0,2,1,1,0]</li><li>输出: [0,0,1,1,2,2]</li></ul><p><strong>进阶：</strong>  </p><blockquote><p>一个直观的解决方案是使用计数排序的两趟扫描算法。<br>首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。<br>你能想出一个仅使用常数空间的一趟扫描算法吗？</p></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：partition"><a href="#方法一：partition" class="headerlink" title="方法一：partition"></a>方法一：partition</h3><blockquote><p>看完题目，发现与荷兰国旗的分组的问题类似，将数组中的数据按照0,1,2 分成三组，大于1 的放右边；小于1 的放在左边；等于1 的放在中间。因此，可以确定如何实现。</p></blockquote><blockquote><p><strong>PS:</strong>  如果 <strong>允许直接调用系统排序的方法</strong> ，那么只需要一句话即可：<strong>Arrays.sort(nums);</strong> </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> less = -<span class="number">1</span>, more = nums.length, cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur &lt; more)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[cur] == <span class="number">0</span>)</span><br><span class="line">                swap(nums, ++less, cur++);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[cur] == <span class="number">2</span>)</span><br><span class="line">                swap(nums, --more, cur);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cur++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t = nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：O(n)</p></li><li><p>空间复杂度：O(1)</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;颜色分类&quot;&gt;&lt;a href=&quot;#颜色分类&quot; class=&quot;headerlink&quot; title=&quot;颜色分类&quot;&gt;&lt;/a&gt;颜色分类&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/sort-colors/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-cn-75-颜色分类&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。&lt;/p&gt;
&lt;p&gt;此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="https://jelly54.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="快速排序" scheme="https://jelly54.github.io/tags/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-451-根据字符出现频率排序</title>
    <link href="https://jelly54.github.io/2018/11/11/LeetCode-451-%E6%A0%B9%E6%8D%AE%E5%AD%97%E7%AC%A6%E5%87%BA%E7%8E%B0%E9%A2%91%E7%8E%87%E6%8E%92%E5%BA%8F/"/>
    <id>https://jelly54.github.io/2018/11/11/LeetCode-451-根据字符出现频率排序/</id>
    <published>2018-11-11T14:16:27.000Z</published>
    <updated>2018-11-19T07:02:19.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="根据字符出现频率排序"><a href="#根据字符出现频率排序" class="headerlink" title="根据字符出现频率排序"></a>根据字符出现频率排序</h1><p><a href="https://leetcode-cn.com/problems/sort-characters-by-frequency/" target="_blank" rel="noopener">LeetCode-cn-451-根据字符出现频率排序</a></p><blockquote><p>给定一个字符串，请将字符串里的字符按照出现的频率降序排列。</p></blockquote><a id="more"></a><p><strong>示例 1:</strong></p><ul><li>输入: “tree”</li><li>输出: “eert”</li><li><strong>解释:</strong>  ‘e’出现两次，’r’和’t’都只出现一次。因此’e’必须出现在’r’和’t’之前。此外，”eetr”也是一个有效的答案。</li></ul><p><strong>示例 2:</strong></p><ul><li>输入: “cccaaa”</li><li>输出: “cccaaa”</li><li><strong>解释:</strong>  ‘c’和’a’都出现三次。此外，”aaaccc”也是有效的答案。</li></ul><p><strong>注意</strong></p><p style="text-indent: 2em">“cacaca”是不正确的，因为相同的字母必须放在一起。</p><p><strong>示例 3:</strong></p><ul><li>输入: “Aabb”</li><li>输出: “bbAa”</li><li><strong>解释:</strong>  此外，”bbaA”也是一个有效的答案，但”Aabb”是不正确的。</li></ul><p><strong>注意</strong></p><p style="text-indent: 2em">‘A’和’a’被认为是两种不同的字符。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：桶排序"><a href="#方法一：桶排序" class="headerlink" title="方法一：桶排序"></a>方法一：桶排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">frequencySort</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    Map&lt;Character, Integer&gt; frequencyForNum = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : s.toCharArray())</span><br><span class="line">        frequencyForNum.put(c, frequencyForNum.getOrDefault(c, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Character&gt;[] frequencyBucket = <span class="keyword">new</span> ArrayList[s.length() + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : frequencyForNum.keySet()) &#123;</span><br><span class="line">        <span class="keyword">int</span> f = frequencyForNum.get(c);</span><br><span class="line">        <span class="keyword">if</span> (frequencyBucket[f] == <span class="keyword">null</span>) &#123;</span><br><span class="line">            frequencyBucket[f] = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        frequencyBucket[f].add(c);</span><br><span class="line">    &#125;</span><br><span class="line">    StringBuilder str = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = frequencyBucket.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (frequencyBucket[i] == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : frequencyBucket[i]) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                str.append(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：O()</p></li><li><p>空间复杂度：O()</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;根据字符出现频率排序&quot;&gt;&lt;a href=&quot;#根据字符出现频率排序&quot; class=&quot;headerlink&quot; title=&quot;根据字符出现频率排序&quot;&gt;&lt;/a&gt;根据字符出现频率排序&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/sort-characters-by-frequency/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-cn-451-根据字符出现频率排序&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个字符串，请将字符串里的字符按照出现的频率降序排列。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="https://jelly54.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="桶排序" scheme="https://jelly54.github.io/tags/%E6%A1%B6%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-347-前K个高频元素</title>
    <link href="https://jelly54.github.io/2018/11/11/LeetCode-347-%E5%89%8DK%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0/"/>
    <id>https://jelly54.github.io/2018/11/11/LeetCode-347-前K个高频元素/</id>
    <published>2018-11-11T14:00:28.000Z</published>
    <updated>2018-11-13T08:37:30.588Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前K个高频元素"><a href="#前K个高频元素" class="headerlink" title="前K个高频元素"></a>前K个高频元素</h1><p><a href="https://leetcode-cn.com/problems/top-k-frequent-elements/" target="_blank" rel="noopener">LeetCode-cn-347-前K个高频元素</a></p><blockquote><p>给定一个非空的整数数组，返回其中出现频率前 k 高的元素。</p></blockquote><a id="more"></a><p><strong>示例 1:</strong>  </p><ul><li>输入: nums = [1,1,1,2,2,3], k = 2</li><li>输出: [1,2]</li></ul><p><strong>示例 2:</strong>  </p><ul><li>输入: nums = [1], k = 1</li><li>输出: [1]</li></ul><p><strong>说明：</strong>  </p><p style="text-indent: 2em">你可以假设给定的 k 总是合理的，且 1 ≤ k ≤ 数组中不相同的元素的个数。<br><br>你的算法的时间复杂度必须优于 O(n log n) , n 数组的大小。</p>  <h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：桶排序"><a href="#方法一：桶排序" class="headerlink" title="方法一：桶排序"></a>方法一：桶排序</h3><blockquote><p>设置若干个桶，每个桶存储出现频率相同的数，并且桶的下标代表桶中数出现的频率，即第 i 个桶中存储的数出现的频率为 i。</p><p>把数都放到桶之后，从后向前遍历桶，最先得到的 k 个数就是出现频率最多的的 k 个数。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">topKFrequent</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; frequencyForNum = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">        frequencyForNum.put(num, frequencyForNum.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Integer&gt;[] buckets = <span class="keyword">new</span> ArrayList[nums.length + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> key : frequencyForNum.keySet()) &#123;</span><br><span class="line">        <span class="keyword">int</span> frequency = frequencyForNum.get(key);</span><br><span class="line">        <span class="keyword">if</span> (buckets[frequency] == <span class="keyword">null</span>) &#123;</span><br><span class="line">            buckets[frequency] = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        buckets[frequency].add(key);</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Integer&gt; topK = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = buckets.length - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; topK.size() &lt; k; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (buckets[i] != <span class="keyword">null</span>) &#123;</span><br><span class="line">            topK.addAll(buckets[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> topK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：O(1)</p></li><li><p>空间复杂度：O(n), n为数组的大小</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前K个高频元素&quot;&gt;&lt;a href=&quot;#前K个高频元素&quot; class=&quot;headerlink&quot; title=&quot;前K个高频元素&quot;&gt;&lt;/a&gt;前K个高频元素&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/top-k-frequent-elements/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-cn-347-前K个高频元素&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个非空的整数数组，返回其中出现频率前 k 高的元素。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="https://jelly54.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="桶排序" scheme="https://jelly54.github.io/tags/%E6%A1%B6%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-215-数组中的第K大的元素</title>
    <link href="https://jelly54.github.io/2018/11/09/LeetCode-215-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACK%E5%A4%A7%E7%9A%84%E5%85%83%E7%B4%A0/"/>
    <id>https://jelly54.github.io/2018/11/09/LeetCode-215-数组中的第K大的元素/</id>
    <published>2018-11-09T08:55:51.000Z</published>
    <updated>2018-11-13T08:27:41.779Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组中的第K大的元素"><a href="#数组中的第K大的元素" class="headerlink" title="数组中的第K大的元素"></a>数组中的第K大的元素</h1><p><a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array/" target="_blank" rel="noopener">LeetCode-cn-215-数组中的第K大的元素</a></p><blockquote><p>在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。</p></blockquote><a id="more"></a><p><strong>示例 1:</strong>  </p><ul><li>输入: [3,2,1,5,6,4] 和 k = 2</li><li>输出: 5</li></ul><p><strong>示例 2:</strong>  </p><ul><li>输入: [3,2,3,1,2,4,5,5,6] 和 k = 4</li><li>输出: 4</li></ul><p><strong>说明:</strong>  </p><p style="text-indent: 2em">你可以假设 k 总是有效的，且 1 ≤ k ≤ 数组的长度。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote><p>给定的数组是无序的，要想拿到第K个大的数据，先要将数组排序，在获取数组的 nums。length - k 位置的数据即可。</p></blockquote><h3 id="方法一：利用数组自带的排序"><a href="#方法一：利用数组自带的排序" class="headerlink" title="方法一：利用数组自带的排序"></a>方法一：利用数组自带的排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="keyword">return</span> nums[nums.length - k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度 O(NlogN)</p></li><li><p>空间复杂度 O(1)</p></li></ul><p><br></p><h3 id="方法二：堆排序"><a href="#方法二：堆排序" class="headerlink" title="方法二：堆排序"></a>方法二：堆排序</h3><blockquote><p>维持一个最大堆，name堆顶的元素将是最大的。将数据存入堆中，控制堆的大小为k，最后peek()一下就是第k大的数据。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    PriorityQueue&lt;Integer&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;(); <span class="comment">// 小顶堆</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> val : nums) &#123;</span><br><span class="line">        pq.add(val);</span><br><span class="line">        <span class="keyword">if</span> (pq.size() &gt; k)  <span class="comment">// 维护堆的大小为 K</span></span><br><span class="line">            pq.poll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pq.peek();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度 O(NlogK)</p></li><li><p>空间复杂度 O(K)。</p></li></ul><p><br></p><h3 id="方法三：-快速选择"><a href="#方法三：-快速选择" class="headerlink" title="方法三： 快速选择"></a>方法三： 快速选择</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    k = nums.length - k;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, h = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; h) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = partition(nums, l, h);</span><br><span class="line">        <span class="keyword">if</span> (j == k) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &lt; k) &#123;</span><br><span class="line">            l = j + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            h = j - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> l, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = l, j = h + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (a[++i] &lt; a[l] &amp;&amp; i &lt; h) ;</span><br><span class="line">        <span class="keyword">while</span> (a[--j] &gt; a[l] &amp;&amp; j &gt; l) ;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= j) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(a, i, j);</span><br><span class="line">    &#125;</span><br><span class="line">    swap(a, l, j);</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = a[i];</span><br><span class="line">    a[i] = a[j];</span><br><span class="line">    a[j] = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度 O(N)</p></li><li><p>空间复杂度 O(1)</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数组中的第K大的元素&quot;&gt;&lt;a href=&quot;#数组中的第K大的元素&quot; class=&quot;headerlink&quot; title=&quot;数组中的第K大的元素&quot;&gt;&lt;/a&gt;数组中的第K大的元素&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/kth-largest-element-in-an-array/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-cn-215-数组中的第K大的元素&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="https://jelly54.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="堆排序" scheme="https://jelly54.github.io/tags/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    
      <category term="快速选择" scheme="https://jelly54.github.io/tags/%E5%BF%AB%E9%80%9F%E9%80%89%E6%8B%A9/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-633-平方数之和</title>
    <link href="https://jelly54.github.io/2018/11/09/LeetCode-633-%E5%B9%B3%E6%96%B9%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>https://jelly54.github.io/2018/11/09/LeetCode-633-平方数之和/</id>
    <published>2018-11-09T06:17:58.000Z</published>
    <updated>2018-11-13T08:38:00.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="平方数之和"><a href="#平方数之和" class="headerlink" title="平方数之和"></a>平方数之和</h1><p><a href="https://leetcode-cn.com/problems/sum-of-square-numbers/" target="_blank" rel="noopener">LeetCode-cn-633-平方数之和</a></p><blockquote><p>给定一个非负整数 c ，你要判断是否存在两个整数 a 和 b，使得 a^2 + b^2 = c。</p></blockquote><a id="more"></a><p><strong>示例1:</strong></p><ul><li>输入: 5</li><li>输出: True</li><li><strong>解释:</strong>  1 <em> 1 + 2 </em> 2 = 5</li></ul><p><strong>示例2:</strong> </p><ul><li>输入: 3</li><li>输出: False</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：-两个指针"><a href="#方法一：-两个指针" class="headerlink" title="方法一： 两个指针"></a>方法一： 两个指针</h3><blockquote><p>一个数如果可以是另外两个数的平方和，那么这两个数必定都比这个书的开方后的值小。</p><p>因此，我们可以定义两个变量，一个从 0 开始，一个从Math.sqrt(c)) 开始。</p><p>将两数平方和 与 该数进行比较，若大于该数，则后指针减一;若小于该数，前指针加一。直到找见 与该数相等，返回</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">judgeSquareSum</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = (<span class="keyword">int</span>)Math.sqrt(c);</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= j)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = i*i + j*j;</span><br><span class="line">            <span class="keyword">if</span>(sum == c)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum &gt; c)&#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：O(N)</p></li><li><p>空间复杂度：O(1)</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;平方数之和&quot;&gt;&lt;a href=&quot;#平方数之和&quot; class=&quot;headerlink&quot; title=&quot;平方数之和&quot;&gt;&lt;/a&gt;平方数之和&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/sum-of-square-numbers/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-cn-633-平方数之和&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个非负整数 c ，你要判断是否存在两个整数 a 和 b，使得 a^2 + b^2 = c。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="双指针" scheme="https://jelly54.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-688-验证回文字符串2</title>
    <link href="https://jelly54.github.io/2018/11/08/LeetCode-680-%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://jelly54.github.io/2018/11/08/LeetCode-680-验证回文字符串/</id>
    <published>2018-11-08T14:26:26.000Z</published>
    <updated>2018-11-13T08:38:26.012Z</updated>
    
    <content type="html"><![CDATA[<h1 id="验证回文字符串2"><a href="#验证回文字符串2" class="headerlink" title="验证回文字符串2"></a>验证回文字符串2</h1><p><a href="https://leetcode-cn.com/problems/valid-palindrome-ii/" target="_blank" rel="noopener">LeetCode-cn-688-验证回文字符串2</a></p><blockquote><p>给定一个非空字符串 s，最多删除一个字符。判断是否能成为回文字符串。</p></blockquote><a id="more"></a><p><strong>示例 1:</strong>  </p><ul><li>输入: “aba”</li><li>输出: True</li></ul><p><strong>示例 2:</strong>  </p><ul><li>输入: “abca”</li><li>输出: True</li><li><strong>解释:</strong>  你可以删除c字符。</li></ul><p><strong>注意:</strong> </p><p style="text-indent: 2em">字符串只包含从 a-z 的小写字母。字符串的最大长度是50000。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：双指针"><a href="#方法一：双指针" class="headerlink" title="方法一：双指针"></a>方法一：双指针</h3><blockquote><p>从string的，头和尾进行比较。如果两两相等。返回true；否则，如果遇见不相等的，则，前指针加一后指针不变，或者，后指针减一，前指针不变，继续判断是不是回文，如果两个有一个后边全是回文，则该string可以 经过删除零个或一个字符，构成回文。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = -<span class="number">1</span>, j = s.length();</span><br><span class="line">        <span class="keyword">while</span>(++i &lt; --j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i) != s.charAt(j))&#123;</span><br><span class="line">                <span class="keyword">return</span> isPalindrom(s, i, j - <span class="number">1</span>) || isPalindrom(s, i+<span class="number">1</span>, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isPalindrom</span><span class="params">(String s, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i++) != s.charAt(j--))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：O(N)</p></li><li><p>空间复杂度：O(1)</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;验证回文字符串2&quot;&gt;&lt;a href=&quot;#验证回文字符串2&quot; class=&quot;headerlink&quot; title=&quot;验证回文字符串2&quot;&gt;&lt;/a&gt;验证回文字符串2&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/valid-palindrome-ii/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-cn-688-验证回文字符串2&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个非空字符串 s，最多删除一个字符。判断是否能成为回文字符串。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="双指针" scheme="https://jelly54.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-141-判断链表是否有环</title>
    <link href="https://jelly54.github.io/2018/11/08/LeetCode-141-%E5%88%A4%E6%96%AD%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E6%9C%89%E7%8E%AF/"/>
    <id>https://jelly54.github.io/2018/11/08/LeetCode-141-判断链表是否有环/</id>
    <published>2018-11-08T14:26:07.000Z</published>
    <updated>2018-11-13T08:26:30.412Z</updated>
    
    <content type="html"><![CDATA[<h1 id="判断环形链表"><a href="#判断环形链表" class="headerlink" title="判断环形链表"></a>判断环形链表</h1><p><a href="https://leetcode-cn.com/problems/linked-list-cycle/" target="_blank" rel="noopener">LeetCode-cn-141-判断链表是否有环</a></p><blockquote><p>给定一个链表，判断链表中是否有环。</p></blockquote><a id="more"></a><p><strong>进阶：</strong><br>你能否不使用额外空间解决此题？</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：双指针"><a href="#方法一：双指针" class="headerlink" title="方法一：双指针"></a>方法一：双指针</h3><blockquote><p>使用双指针，一个指针每次移动一个节点，一个指针每次移动两个节点，如果存在环，那么这两个指针一定会相遇。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        ListNode l1 = head, l2 = head.next;</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="keyword">null</span> &amp;&amp;l2 != <span class="keyword">null</span> &amp;&amp; l2.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l1 == l2)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">            l2 = l2.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：O(N)</p></li><li><p>空间复杂度：O(1)</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;判断环形链表&quot;&gt;&lt;a href=&quot;#判断环形链表&quot; class=&quot;headerlink&quot; title=&quot;判断环形链表&quot;&gt;&lt;/a&gt;判断环形链表&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/linked-list-cycle/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-cn-141-判断链表是否有环&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个链表，判断链表中是否有环。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="双指针" scheme="https://jelly54.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-345-反转字符串中的元音字母</title>
    <link href="https://jelly54.github.io/2018/11/08/LeetCode-345-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%85%83%E9%9F%B3%E5%AD%97%E6%AF%8D/"/>
    <id>https://jelly54.github.io/2018/11/08/LeetCode-345-反转字符串中的元音字母/</id>
    <published>2018-11-08T14:25:05.000Z</published>
    <updated>2018-11-13T08:37:00.294Z</updated>
    
    <content type="html"><![CDATA[<h1 id="反转字符串中的元音字母"><a href="#反转字符串中的元音字母" class="headerlink" title="反转字符串中的元音字母"></a>反转字符串中的元音字母</h1><p><a href="https://leetcode-cn.com/problems/reverse-vowels-of-a-string/" target="_blank" rel="noopener">LeetCode-cn-345-反转字符串中的元音字母</a></p><blockquote><p>编写一个函数，以字符串作为输入，反转该字符串中的元音字母。</p></blockquote><a id="more"></a><p><strong>示例 1:</strong> </p><ul><li>输入: “hello”</li><li>输出: “holle”</li></ul><p><strong>示例 2:</strong>  </p><ul><li>输入: “leetcode”</li><li>输出: “leotcede”</li><li><strong>说明:</strong>  元音字母不包含字母”y”。</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一-双指针"><a href="#方法一-双指针" class="headerlink" title="方法一 双指针"></a>方法一 双指针</h3><blockquote><p>使用双指针指向待反转的两个元音字符，一个指针从头向尾遍历，一个指针从尾到头遍历。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> HashSet&lt;Character&gt; vowels = <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(<span class="string">'a'</span>, <span class="string">'e'</span>, <span class="string">'i'</span>, <span class="string">'o'</span>, <span class="string">'u'</span>, <span class="string">'A'</span>, <span class="string">'E'</span>, <span class="string">'I'</span>, <span class="string">'O'</span>, <span class="string">'U'</span>));</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseVowels</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = s.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">char</span>[] result = <span class="keyword">new</span> <span class="keyword">char</span>[s.length()];</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">            <span class="keyword">char</span> ci = s.charAt(i);</span><br><span class="line">            <span class="keyword">char</span> cj = s.charAt(j);</span><br><span class="line">            <span class="keyword">if</span> (!vowels.contains(ci)) &#123;</span><br><span class="line">                result[i++] = ci;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!vowels.contains(cj)) &#123;</span><br><span class="line">                result[j--] = cj;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result[i++] = cj;</span><br><span class="line">                result[j--] = ci;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：O(N)</p></li><li><p>空间复杂度：O(1)</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;反转字符串中的元音字母&quot;&gt;&lt;a href=&quot;#反转字符串中的元音字母&quot; class=&quot;headerlink&quot; title=&quot;反转字符串中的元音字母&quot;&gt;&lt;/a&gt;反转字符串中的元音字母&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/reverse-vowels-of-a-string/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-cn-345-反转字符串中的元音字母&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;编写一个函数，以字符串作为输入，反转该字符串中的元音字母。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="双指针" scheme="https://jelly54.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-167-两数之和2-输入有序数组</title>
    <link href="https://jelly54.github.io/2018/10/22/LeetCode-167-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C2-%E8%BE%93%E5%85%A5%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <id>https://jelly54.github.io/2018/10/22/LeetCode-167-两数之和2-输入有序数组/</id>
    <published>2018-10-22T05:59:18.000Z</published>
    <updated>2018-11-13T08:27:03.833Z</updated>
    
    <content type="html"><![CDATA[<h1 id="两数之和2-输入有序数组"><a href="#两数之和2-输入有序数组" class="headerlink" title="两数之和2-输入有序数组"></a>两数之和2-输入有序数组</h1><p><a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/" target="_blank" rel="noopener">LeetCode-cn-167-两数之和2-输入有序数组</a></p><blockquote><p>给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。<br>函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。</p></blockquote><a id="more"></a><p><strong>说明:</strong>  </p><blockquote><p>返回的下标值（index1 和 index2）不是从零开始的。<br>你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。</p></blockquote><p><strong>示例:</strong>  </p><ul><li>输入: numbers = [2, 7, 11, 15], target = 9</li><li>输出: [1,2]</li><li><strong>解释:</strong>  2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：双指针"><a href="#方法一：双指针" class="headerlink" title="方法一：双指针"></a>方法一：双指针</h3><blockquote><p>使用双指针，一个指针指向值较小的元素，一个指针指向值较大的元素。指向较小元素的指针从头向尾遍历，指向较大元素的指针从尾向头遍历。</p></blockquote><ul><li>如果两个指针指向元素的和 sum == target，那么得到要求的结果；</li><li>如果 sum &gt; target，移动较大的元素，使 sum 变小一些；</li><li>如果 sum &lt; target，移动较小的元素，使 sum 变大一些。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = numbers.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = numbers[i] + numbers[j];</span><br><span class="line">            <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i + <span class="number">1</span>, j + <span class="number">1</span>&#125;;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：O(N)。双指针，从数组的两边开始，只遍历一次。</p></li><li><p>空间复杂度：O(1)。在原地操作没有使用额外空间。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;两数之和2-输入有序数组&quot;&gt;&lt;a href=&quot;#两数之和2-输入有序数组&quot; class=&quot;headerlink&quot; title=&quot;两数之和2-输入有序数组&quot;&gt;&lt;/a&gt;两数之和2-输入有序数组&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-cn-167-两数之和2-输入有序数组&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。&lt;br&gt;函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="双指针" scheme="https://jelly54.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-88-合并两个有序数组</title>
    <link href="https://jelly54.github.io/2018/10/22/LeetCode-088-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <id>https://jelly54.github.io/2018/10/22/LeetCode-088-合并两个有序数组/</id>
    <published>2018-10-22T04:55:38.000Z</published>
    <updated>2018-11-13T08:33:27.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="合并两个有序数组"><a href="#合并两个有序数组" class="headerlink" title="合并两个有序数组"></a>合并两个有序数组</h1><p><a href="https://leetcode-cn.com/problems/merge-sorted-array/" target="_blank" rel="noopener">LeetCode-cn-88-合并两个有序数组</a></p><blockquote><p>给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。</p></blockquote><a id="more"></a><p><strong>说明:</strong>  </p><ul><li>初始化 nums1 和 nums2 的元素数量分别为 m 和 n。</li><li>你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。</li></ul><p><strong>示例:</strong> </p><ul><li><p>输入:<br>  nums1 = [1,2,3,0,0,0], m = 3<br>  nums2 = [2,5,6],       n = 3  </p></li><li><p>输出: [1,2,2,3,5,6]  </p></li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：双指针"><a href="#方法一：双指针" class="headerlink" title="方法一：双指针"></a>方法一：双指针</h3><blockquote><p>因为nums1 有足够的空间，可以先划定nums1最后完成时，末尾下标，记为 size。同时使用双指针，一个指向nums1， 一个指向nums2，比较，将大的一个数，放在size–的位置上。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len1 = m - <span class="number">1</span>, len2 = n -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> size = m + n -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(len1 &gt;= <span class="number">0</span> || len2 &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(len1 &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                nums1[size--] = nums2[len2--];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(len2 &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                nums1[size--] = nums1[len1--];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums1[len1] &gt; nums2[len2])&#123;</span><br><span class="line">                nums1[size--] = nums1[len1--];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                nums1[size--] = nums2[len2--];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：O(n+m)，只遍历了一遍数组/</p></li><li><p>空间复杂度：O(1)</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;合并两个有序数组&quot;&gt;&lt;a href=&quot;#合并两个有序数组&quot; class=&quot;headerlink&quot; title=&quot;合并两个有序数组&quot;&gt;&lt;/a&gt;合并两个有序数组&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/merge-sorted-array/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-cn-88-合并两个有序数组&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="双指针" scheme="https://jelly54.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-26-删除数组中的重复项</title>
    <link href="https://jelly54.github.io/2018/10/22/LeetCode-026-%E5%88%A0%E9%99%A4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/"/>
    <id>https://jelly54.github.io/2018/10/22/LeetCode-026-删除数组中的重复项/</id>
    <published>2018-10-22T04:43:40.000Z</published>
    <updated>2018-11-13T08:31:16.619Z</updated>
    
    <content type="html"><![CDATA[<h1 id="删除数组中的重复项"><a href="#删除数组中的重复项" class="headerlink" title="删除数组中的重复项"></a>删除数组中的重复项</h1><p><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/" target="_blank" rel="noopener">LeetCode-cn-26-删除数组中的重复项</a></p><blockquote><p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。<br>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p></blockquote><a id="more"></a><p><strong>示例 1:</strong>  </p><ul><li><p>给定数组 nums = [1,1,2], </p></li><li><p>函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 </p></li><li><p>你不需要考虑数组中超出新长度后面的元素。</p></li></ul><p><strong>示例 2:</strong>  </p><ul><li><p>给定 nums = [0,0,1,1,1,2,2,3,3,4],</p></li><li><p>函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</p></li><li><p>你不需要考虑数组中超出新长度后面的元素。</p></li></ul><p><strong>为什么返回数值是整数，但输出的答案是数组呢?</strong>  </p><p><strong>请注意</strong><br>输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:  </p><blockquote><p>// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝<br>int len = removeDuplicates(nums);</p><p>// 在函数里修改输入数组对于调用者是可见的。<br>// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。<br>for (int i = 0; i &lt; len; i++) {<br>  print(nums[i]);<br>}</p></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：-双指针"><a href="#方法一：-双指针" class="headerlink" title="方法一： 双指针"></a>方法一： 双指针</h3><p><strong>算法</strong>  </p><blockquote><p>数组完成排序后，我们可以放置两个指针 i 和 j，其中 i 是慢指针，而 j 是快指针。只要 nums[i] = nums[j]，我们就增加 j 以跳过重复项。<br>当我们遇到 nums[j] != nums[i] 时，跳过重复项的运行已经结束，因此我们必须把它nums[j]的值复制到 nums[i + 1]。然后递增 i，接着我们将再次重复相同的过程，直到 j 达数组的末尾为止。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[j] != nums[i]) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            nums[i] = nums[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：15ms, O(n)， 假设数组的长度是 n，那么 i 和 j 分别最多遍历 n 步。</p></li><li><p>空间复杂度：O(1)。</p></li></ul><p><br></p><h3 id="方法二：我的做法"><a href="#方法二：我的做法" class="headerlink" title="方法二：我的做法"></a>方法二：我的做法</h3><blockquote><p>双指针 一快一慢两个指针。</p></blockquote><pre><code class="java"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">intremoveDuplicates</span><span class="params">(it[] nums)</span> </span>{    <span class="keyword">if</span>(nums.length== <span class="number">0</span>)        <span class="keyword">return</span> <span class="number">0</span>;    <span class="keyword">int</span> i = <span class="number">0</span>, j =<span class="number">1</span>;     <span class="keyword">while</span>(j &lt;=nums.length -<span class="number">1</span>) {        <span class="keyword">if</span>(nums[i]== nums[j]){            j++;        }elseif(nums[i] &lt;nums[j]){        swap(nums,++i, j++);        }    }    <span class="keyword">return</span> i+<span class="number">1</span>;}<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="title">voidswap</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>{    <span class="keyword">int</span> tmp =nums[i];    nums[i] =nums[j];    nums[j] = tmp;}</code></pre><h4 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：9ms, O(n)， 假设数组的长度是 n，那么 i 和 j 分别最多遍历 n 步。</p></li><li><p>空间复杂度：O(1)。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;删除数组中的重复项&quot;&gt;&lt;a href=&quot;#删除数组中的重复项&quot; class=&quot;headerlink&quot; title=&quot;删除数组中的重复项&quot;&gt;&lt;/a&gt;删除数组中的重复项&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-cn-26-删除数组中的重复项&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。&lt;br&gt;不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-14-最长公共前缀</title>
    <link href="https://jelly54.github.io/2018/10/22/LeetCode-014-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/"/>
    <id>https://jelly54.github.io/2018/10/22/LeetCode-014-最长公共前缀/</id>
    <published>2018-10-22T04:42:33.000Z</published>
    <updated>2018-11-13T08:28:44.580Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a>最长公共前缀</h1><p><a href="https://leetcode-cn.com/problems/longest-common-prefix/" target="_blank" rel="noopener">LeetCode-cn-14-最长公共前缀</a></p><blockquote><p>编写一个函数来查找字符串数组中的最长公共前缀。<br>如果不存在公共前缀，返回空字符串 “”。</p></blockquote><a id="more"></a> <p><strong>示例 1:</strong> </p><ul><li>输入: [“flower”,”flow”,”flight”]</li><li>输出: “fl”</li></ul><p><strong>示例 2:</strong>  </p><ul><li>输入: [“dog”,”racecar”,”car”]</li><li>输出: “”</li><li><strong>解释:</strong>  输入不存在公共前缀。</li></ul><p><strong>说明:</strong>  所有输入只包含小写字母 a-z 。 </p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：横向比较（自创）"><a href="#方法一：横向比较（自创）" class="headerlink" title="方法一：横向比较（自创）"></a>方法一：横向比较（自创）</h3><blockquote><p>数组大小若小于2 ，则直接返回第一个字符串。否则，首先拿出strs[0], strs[1], 进行比较，找出这两个最长的公共子串，记录在res中，之后，以同样的逻辑，在res和后边其他的数据进行比较。找出所有的公共字串。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(strs == <span class="keyword">null</span> || strs.length == <span class="number">0</span>)    </span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span>(strs.length == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> strs[<span class="number">0</span>];</span><br><span class="line">        String res = longestCommonPrefixHelp(strs[<span class="number">0</span>], strs[<span class="number">1</span>]);     </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= strs.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            res = longestCommonPrefixHelp(res, strs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefixHelp</span><span class="params">(String s1, String s2)</span></span>&#123;</span><br><span class="line">        StringBuffer res = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">int</span> len = s1.length() &lt; s2.length() ? s1.length() : s2.length();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; len)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s1.charAt(i) == s2.charAt(i))&#123;</span><br><span class="line">                res.append(s1.charAt(i));</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：O(S)， S是字符串数组的所有字符的和。</p></li><li><p>空间复杂度：O(1)， 仅仅使用常量级别的额外空间。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;最长公共前缀&quot;&gt;&lt;a href=&quot;#最长公共前缀&quot; class=&quot;headerlink&quot; title=&quot;最长公共前缀&quot;&gt;&lt;/a&gt;最长公共前缀&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/longest-common-prefix/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-cn-14-最长公共前缀&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;编写一个函数来查找字符串数组中的最长公共前缀。&lt;br&gt;如果不存在公共前缀，返回空字符串 “”。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-13-罗马数字转整数</title>
    <link href="https://jelly54.github.io/2018/10/22/LeetCode-013-%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/"/>
    <id>https://jelly54.github.io/2018/10/22/LeetCode-013-罗马数字转整数/</id>
    <published>2018-10-22T04:26:17.000Z</published>
    <updated>2018-11-13T08:28:19.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="罗马数字转整数"><a href="#罗马数字转整数" class="headerlink" title="罗马数字转整数"></a>罗马数字转整数</h1><p><a href="https://leetcode-cn.com/problems/roman-to-integer/" target="_blank" rel="noopener">LeetCode-cn-13-罗马数字转整数</a></p><blockquote><p>将罗马数字转换成整数输出<br>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</p></blockquote><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">字符          数值</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure><p><strong>例如:</strong><br>罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p><blockquote><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：  </p><ul><li>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</li><li>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 </li><li>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</li></ul></blockquote><p>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</p><p><strong>示例 1:</strong></p><ul><li>输入: “III”</li><li>输出: 3</li></ul><p><strong>示例 2:</strong></p><ul><li>输入: “IV”</li><li>输出: 4</li></ul><p><strong>示例 3:</strong></p><ul><li>输入: “IX”</li><li>输出: 9</li></ul><p><strong>示例 4:</strong></p><ul><li>输入: “LVIII”</li><li>输出: 58</li><li><strong>解释:</strong>  L = 50, V= 5, III = 3.</li></ul><p><strong>示例 5:</strong></p><ul><li>输入: “MCMXCIV”</li><li>输出: 1994</li><li><strong>解释:</strong>  M = 1000, CM = 900, XC = 90, IV = 4.  </li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote><p>将罗马字母和对应的int值存入hash表，遍历所给的字符串，if–else判断即可。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">'I'</span>, <span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">'V'</span>, <span class="number">5</span>);</span><br><span class="line">        map.put(<span class="string">'X'</span>, <span class="number">10</span>);</span><br><span class="line">        map.put(<span class="string">'L'</span>, <span class="number">50</span>);</span><br><span class="line">        map.put(<span class="string">'C'</span>, <span class="number">100</span>);</span><br><span class="line">        map.put(<span class="string">'D'</span>, <span class="number">500</span>);</span><br><span class="line">        map.put(<span class="string">'M'</span>, <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) != <span class="string">'I'</span> &amp;&amp; s.charAt(i) != <span class="string">'X'</span> &amp;&amp; s.charAt(i) != <span class="string">'C'</span>) &#123;</span><br><span class="line">                res += map.get(s.charAt(i));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i) == <span class="string">'I'</span>) &#123;<span class="comment">// 可能匹配 'IV' 'IX'</span></span><br><span class="line">                    <span class="keyword">if</span> (i + <span class="number">1</span> &lt; s.length() &amp;&amp; s.charAt(i + <span class="number">1</span>) == <span class="string">'V'</span>) &#123;</span><br><span class="line">                        res += <span class="number">4</span>;</span><br><span class="line">                        i += <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i + <span class="number">1</span> &lt; s.length() &amp;&amp; s.charAt(i + <span class="number">1</span>) == <span class="string">'X'</span>) &#123;</span><br><span class="line">                        res += <span class="number">9</span>;</span><br><span class="line">                        i += <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;<span class="comment">// 未匹配到上边的选项，简单相加</span></span><br><span class="line">                        res += map.get(s.charAt(i));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) == <span class="string">'X'</span>) &#123;<span class="comment">// 可能匹配 'XL' 'XC'</span></span><br><span class="line">                    <span class="keyword">if</span> (i + <span class="number">1</span> &lt; s.length() &amp;&amp; s.charAt(i + <span class="number">1</span>) == <span class="string">'L'</span>) &#123;</span><br><span class="line">                        res += <span class="number">40</span>;</span><br><span class="line">                        i += <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i + <span class="number">1</span> &lt; s.length() &amp;&amp; s.charAt(i + <span class="number">1</span>) == <span class="string">'C'</span>) &#123;</span><br><span class="line">                        res += <span class="number">90</span>;</span><br><span class="line">                        i += <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;<span class="comment">// 未匹配到上边的选项，简单相加</span></span><br><span class="line">                        res += map.get(s.charAt(i));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) == <span class="string">'C'</span>) &#123;<span class="comment">// 可能匹配 'CD' 'CM'</span></span><br><span class="line">                    <span class="keyword">if</span> (i + <span class="number">1</span> &lt; s.length() &amp;&amp; s.charAt(i + <span class="number">1</span>) == <span class="string">'D'</span>) &#123;</span><br><span class="line">                        res += <span class="number">400</span>;</span><br><span class="line">                        i += <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i + <span class="number">1</span> &lt; s.length() &amp;&amp; s.charAt(i + <span class="number">1</span>) == <span class="string">'M'</span>) &#123;</span><br><span class="line">                        res += <span class="number">900</span>;</span><br><span class="line">                        i += <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;<span class="comment">// 未匹配到上边的选项，简单相加</span></span><br><span class="line">                        res += map.get(s.charAt(i));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度： O(N)，只进行一次遍历，进行if–else 判断即可。</p></li><li><p>空间复杂度：O(7)，需要一个罗马字母和int值 的映射表</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;罗马数字转整数&quot;&gt;&lt;a href=&quot;#罗马数字转整数&quot; class=&quot;headerlink&quot; title=&quot;罗马数字转整数&quot;&gt;&lt;/a&gt;罗马数字转整数&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/roman-to-integer/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-cn-13-罗马数字转整数&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;将罗马数字转换成整数输出&lt;br&gt;罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-09-回文数</title>
    <link href="https://jelly54.github.io/2018/10/22/LeetCode-009-%E5%9B%9E%E6%96%87%E6%95%B0/"/>
    <id>https://jelly54.github.io/2018/10/22/LeetCode-009-回文数/</id>
    <published>2018-10-22T03:00:15.000Z</published>
    <updated>2018-11-13T08:24:26.179Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h1><p><a href="https://leetcode-cn.com/problems/palindrome-number/" target="_blank" rel="noopener">LeetCode-cn-09-回文数</a></p><blockquote><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p></blockquote><a id="more"></a><p><strong>示例 1:</strong>  </p><ul><li>输入: 121</li><li>输出: true</li></ul><p><strong>示例 2:</strong>  </p><ul><li>输入: -121</li><li>输出: false</li><li><strong>解释:</strong>  从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</li></ul><p><strong>示例 3:</strong>  </p><ul><li>输入: 10</li><li>输出: false</li><li><strong>解释:</strong>  从右向左读, 为 01 。因此它不是一个回文数。</li></ul><p><strong>进阶:</strong>  </p><p style="text-indent: 2em"> 你能不将整数转为字符串来解决这个问题吗？</p>  <h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>###方法一：反转一半数字</p><p><strong>思路</strong> </p><blockquote><p>映入脑海的第一个想法是将数字转换为字符串，并检查字符串是否为回文。但是，这需要额外的非常量空间来创建问题描述中所不允许的字符串。</p><p>第二个想法是将数字本身反转，然后将反转后的数字与原始数字进行比较，如果它们是相同的，那么这个数字就是回文。 但是，如果反转后的数字大于 int.MAX，我们将遇到整数溢出问题。</p><p>按照第二个想法，为了避免数字反转可能导致的溢出问题，为什么不考虑只反转 int 数字的一半？毕竟，如果该数字是回文，其后半部分反转后应该与原始数字的前半部分相同。</p></blockquote><p><strong>例如:</strong>  </p><p>&lt;p style=”text-indent: 2em”输入 1221，</p>我们可以将数字“1221”的后半部分从“21”反转为“12”，并将其与前半部分“12”进行比较，因为二者相同，我们得知数字 1221 是回文。<p></p><p>让我们看看如何将这个想法转化为一个算法。</p><p><strong>算法</strong>  </p><blockquote><p>首先，我们应该处理一些临界情况。<strong>所有负数都不可能是回文</strong>，例如：-123 不是回文，因为 - 不等于 3。所以我们可以对所有负数返回 false。</p><p>现在，让我们来考虑如何反转后半部分的数字。 对于数字 1221，如果执行 1221 % 10，我们将 <strong>得到最后一位数字 1</strong> ，要 <strong>得到倒数第二位数字，我们可以先通过除以 10 把最后一位数字从 1221 中移除，1221 / 10 = 122，再求出上一步结果除以10的余数，122 % 10 = 2，就可以得到倒数第二位数字。</strong> 如果我们 <strong>把最后一位数字乘以10，再加上倒数第二位数字，1 * 10 + 2 = 12，就得到了我们想要的反转后的数字。</strong> 如果继续这个过程，我们将得到更多位数的反转数字。</p></blockquote><p>现在的问题是，我们 <strong>如何知道反转数字的位数已经达到原始数字位数的一半？</strong> </p><blockquote><p>我们将原始数字除以 10，然后给反转后的数字乘上 10，所以， <strong>当原始数字小于反转后的数字时</strong> ，就意味着我们已经处理了一半位数的数字。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C++解决</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">IsPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 特殊情况：</span></span><br><span class="line">        <span class="comment">// 如上所述，当 x &lt; 0 时，x 不是回文数。</span></span><br><span class="line">        <span class="comment">// 同样地，如果数字的最后一位是 0，为了使该数字为回文，</span></span><br><span class="line">        <span class="comment">// 则其第一位数字也应该是 0</span></span><br><span class="line">        <span class="comment">// 只有 0 满足这一属性</span></span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span> || (x % <span class="number">10</span> == <span class="number">0</span> &amp;&amp; x != <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> revertedNumber = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x &gt; revertedNumber) &#123;</span><br><span class="line">            revertedNumber = revertedNumber * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当数字长度为奇数时，我们可以通过 revertedNumber/10 去除处于中位的数字。</span></span><br><span class="line">        <span class="comment">// 例如，当输入为 12321 时，在 while 循环的末尾我们可以得到 x = 12，revertedNumber = 123，</span></span><br><span class="line">        <span class="comment">// 由于处于中位的数字不影响回文（它总是与自己相等），所以我们可以简单地将其去除。</span></span><br><span class="line">        <span class="keyword">return</span> x == revertedNumber || x == revertedNumber/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：O(log10(n))，对于每次迭代，我们会将输入除以10，因此时间复杂度为 O(log10(n))。</p></li><li><p>空间复杂度：O(1)。  </p></li></ul><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我的解决方案，时间339ms，java</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(x &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        String string = Integer.toString(x);</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> r = string.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">            <span class="keyword">if</span>(string.charAt(l) != string.charAt(r))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            l++;</span><br><span class="line">            r--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;回文数&quot;&gt;&lt;a href=&quot;#回文数&quot; class=&quot;headerlink&quot; title=&quot;回文数&quot;&gt;&lt;/a&gt;回文数&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/palindrome-number/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-cn-09-回文数&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
