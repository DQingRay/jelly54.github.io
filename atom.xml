<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爱吃jelly的Jelly</title>
  
  <subtitle>就揪啾  就是 Jelly</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jelly54.github.io/"/>
  <updated>2019-06-13T02:06:14.653Z</updated>
  <id>https://jelly54.github.io/</id>
  
  <author>
    <name>Big Jelly</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IDEA中安装配置Gradle</title>
    <link href="https://jelly54.github.io/2019/03/06/IDEA%E4%B8%AD%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEGradle/"/>
    <id>https://jelly54.github.io/2019/03/06/IDEA中安装配置Gradle/</id>
    <published>2019-03-06T01:49:22.000Z</published>
    <updated>2019-06-13T02:06:14.653Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h1><p>Gradle 的核心在于基于 Groovy 的丰富而可扩展的域描述语言(DSL)。 Groovy 通过声明性的语言元素将基于声明的构建推向下层，你可以按你想要的方式进行组合。 这些元素同样也为支持 Java， Groovy，OSGi，Web 和 Scala 项目提供了基于约定的构建。 并且，这种声明性的语言是可以扩展的。你可以添加新的或增强现有的语言元素。 因此，它提供了简明、可维护和易理解的构建。</p><a id="more"></a><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Gradle，是一个基于JVM的富有突破性构建工具。<br>它为您提供了:  </p><ul><li>一个像 ant 一样，通用的灵活的构建工具</li><li>一种可切换的，像 maven 一样的基于约定约定优于配置的构建框架</li><li>强大的多工程构建支持</li><li>强大的依赖管理(基于 ApacheIvy)</li><li>对已有的 maven 和 ivy 仓库的全面支持</li><li>支持传递性依赖管理，而不需要远程仓库或者 pom.xml 或者 ivy 配置文件</li><li>ant 式的任务和构建是 gradle 的第一公民</li><li>基于 groovy，其 build 脚本使用 groovy dsl 编写</li><li>具有广泛的领域模型支持你的构建</li></ul><h2 id="Intellij-IDEA-安装配置Gradle"><a href="#Intellij-IDEA-安装配置Gradle" class="headerlink" title="Intellij IDEA 安装配置Gradle"></a>Intellij IDEA 安装配置Gradle</h2><h3 id="windows下安装"><a href="#windows下安装" class="headerlink" title="windows下安装"></a>windows下安装</h3><ol><li><p>到官网链接下载最新的bin版本，解压到</p><blockquote><p>F:\Tools\Gradle</p></blockquote></li><li><p>配置环境变量</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GRADLE_HOME=F:\Tools\Gradle</span><br><span class="line"></span><br><span class="line">GRADLE_USER_HOME=F:\Tools\Gradle\.gradle</span><br></pre></td></tr></table></figure><p>注意上面的配置<br>第一个是gradel,是gradle的安装路径<br>第二个是.gradle,注意前面有个点号，这个文件是用来存放Gradle缓存的</p><p>将下面的配置添加到Path路径中： </p><blockquote><p>F:\Tools\Gradle\bin</p></blockquote><ol start="3"><li>使用 <strong>gradle -v</strong> 命令查看：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> gradle -v</span><br><span class="line"></span><br><span class="line">Welcome to Gradle 4.9!</span><br><span class="line"></span><br><span class="line">Here are the highlights of this release:</span><br><span class="line"> - Experimental APIs for creating and configuring tasks lazily</span><br><span class="line"> - Pass arguments to JavaExec via CLI</span><br><span class="line"> - Auxiliary publication dependency support for multi-project builds</span><br><span class="line"> - Improved dependency insight report</span><br><span class="line"></span><br><span class="line">For more details see https://docs.gradle.org/4.9/release-notes.html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Gradle 4.9</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Build time:   2018-07-16 08:14:03 UTC</span><br><span class="line">Revision:     efcf8c1cf533b03c70f394f270f46a174c738efc</span><br><span class="line"></span><br><span class="line">Kotlin DSL:   0.18.4</span><br><span class="line">Kotlin:       1.2.41</span><br><span class="line">Groovy:       2.4.12</span><br><span class="line">Ant:          Apache Ant(TM) version 1.9.11 compiled on March 23 2018</span><br><span class="line">JVM:          1.8.0_102 (Oracle Corporation 25.102-b14)</span><br><span class="line">OS:           Windows 10 10.0 amd64</span><br></pre></td></tr></table></figure><ol start="4"><li><p>提高编译速度<br>在咱们的gradle缓存.gradle目录下创建一个gradle.properties 文件 ，再打开该文件在其中添加如下语句， <strong>可以提高编译速度。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>开启线程守护，第一次编译时开线程，之后就不会再开了</span><br><span class="line">org.gradle.daemon=true</span><br><span class="line"><span class="meta">#</span>配置编译时的虚拟机大小</span><br><span class="line">org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8</span><br><span class="line"><span class="meta">#</span>开启并行编译，相当于多条线程再走</span><br><span class="line">org.gradle.parallel=true</span><br><span class="line"><span class="meta">#</span>启用新的孵化模式</span><br><span class="line">org.gradle.configureondemand=true</span><br></pre></td></tr></table></figure></li><li><p>配置远程阿里云仓库</p></li></ol><p>在gradle目录下的init.d目录中创建名为init.gradle文件，内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">allprojects&#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        def REPOSITORY_URL = 'http://maven.aliyun.com/nexus/content/groups/public/'</span><br><span class="line">        all &#123; ArtifactRepository repo -&gt;</span><br><span class="line">            if(repo instanceof MavenArtifactRepository)&#123;</span><br><span class="line">                def url = repo.url.toString()</span><br><span class="line">                if (url.startsWith('https://repo1.maven.org/maven2') || url.startsWith('https://jcenter.bintray.com/')) &#123;</span><br><span class="line">                    project.logger.lifecycle "Repository $&#123;repo.url&#125; replaced by $REPOSITORY_URL."</span><br><span class="line">                    remove repo</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        maven &#123;</span><br><span class="line">            url REPOSITORY_URL</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>IDEA中配置使用gradle<br><img src="https://s2.ax1x.com/2019/06/13/VWvIq1.png" alt="VWvIq1.png"></li></ol><p>Service directory path:就配置到放gradle缓存的地方。<br>Offline work:离线工作，在包全都下载以后可以设置，这样效率高些。（刚开始不要选）</p><h3 id="Gradle命令"><a href="#Gradle命令" class="headerlink" title="Gradle命令"></a>Gradle命令</h3><pre><code class="shell">gradle -v                  //版本号gradle clean               //清除build文件夹gradle build               //检查依赖并打包gradle assembleDebug       //编译打包Debug包gradle assembleRelease     //编译打包Release包gradle installRelease      //打包并安装Release包gradle unstallRelease      //卸载Release包gradle dependencies        //查看依赖图表gradle clean build -x test //跳过测试编译gradle --profile build     //分析构建任务gradle build --dry-run     //编译并不执行任务gradle install             //安置项目jar包到本地Maven仓库gradle tasks               //查看Gradle任务gradle tasks --all         //查看所有Gradle任务gradle build --daemon      //使用Gradle守护程序(Daemon)gradle build --offline     //用离线模式运行gradle clean build --refresh-dependencies     //刷新Gradle依赖缓存</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Gradle&quot;&gt;&lt;a href=&quot;#Gradle&quot; class=&quot;headerlink&quot; title=&quot;Gradle&quot;&gt;&lt;/a&gt;Gradle&lt;/h1&gt;&lt;p&gt;Gradle 的核心在于基于 Groovy 的丰富而可扩展的域描述语言(DSL)。 Groovy 通过声明性的语言元素将基于声明的构建推向下层，你可以按你想要的方式进行组合。 这些元素同样也为支持 Java， Groovy，OSGi，Web 和 Scala 项目提供了基于约定的构建。 并且，这种声明性的语言是可以扩展的。你可以添加新的或增强现有的语言元素。 因此，它提供了简明、可维护和易理解的构建。&lt;/p&gt;
    
    </summary>
    
      <category term="构建工具" scheme="https://jelly54.github.io/categories/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="gradle" scheme="https://jelly54.github.io/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>IDEA中使用Lombok</title>
    <link href="https://jelly54.github.io/2019/03/06/IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8Lombok/"/>
    <id>https://jelly54.github.io/2019/03/06/IDEA中使用Lombok/</id>
    <published>2019-03-06T01:25:13.000Z</published>
    <updated>2019-06-13T01:52:55.953Z</updated>
    
    <content type="html"><![CDATA[<p>Lombok 是一个jar包，可以节约很多敲代码的工作，适当的为自己增加一点趁手的工作。<br>官网地址：<a href="https://projectlombok.org/" target="_blank" rel="noopener">https://projectlombok.org/</a><br>最常用的就是@Data，@Log<br>最近在使用idea，就记录一下在这个下面使用的方式吧。</p><a id="more"></a><h1 id="在IDEA中使用"><a href="#在IDEA中使用" class="headerlink" title="在IDEA中使用"></a>在IDEA中使用</h1><p><a href="https://imgchr.com/i/VWLGfH" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/13/VWLGfH.png" alt="VWLGfH.png"></a></p><p>在步骤4，应该是个install，我的这个截图是已经安装完成的。<br>步骤5，如果在线安装不成，可以试试离线安装。</p><h2 id="开启-Enable-annotation-processing"><a href="#开启-Enable-annotation-processing" class="headerlink" title="开启 Enable annotation processing"></a>开启 Enable annotation processing</h2><p><a href="https://imgchr.com/i/VWL8te" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/13/VWL8te.png" alt="VWL8te.png"></a></p><h2 id="POM-增加依赖"><a href="#POM-增加依赖" class="headerlink" title="POM 增加依赖"></a>POM 增加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="最后一步"><a href="#最后一步" class="headerlink" title="最后一步"></a>最后一步</h2><p>增加 <strong>@Data</strong> 注解，可以在类structure直接看到生成的<strong>get set</strong> 等结构了<br><a href="https://imgchr.com/i/VWLYpd" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/13/VWLYpd.png" alt="VWLYpd.png"></a></p><h1 id="lombok-Accessors注解"><a href="#lombok-Accessors注解" class="headerlink" title="lombok-@Accessors注解"></a>lombok-@Accessors注解</h1><p><strong>简介：</strong> 一个为getter和setter设计的更流畅的API</p><p><strong>概况：</strong><br>@Accessors 因此有3个选择： </p><ol><li><p><strong>fluent</strong> 一个布尔值。如果为真，pepper的getter就是 pepper()，setter方法就是pepper(T newValue)。并且，除非特别说明，chain默认为真。<br><a href="https://imgchr.com/i/VWOeUS" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/13/VWOeUS.png" alt="VWOeUS.png"></a></p></li><li><p><strong>chain</strong> 一个布尔值。如果为真，产生的setter返回的this而不是void，默认是假。如果fluent=true，那么chain默认为真。set方法返回的是对象的实例，因此可以直接再使用set方法或者直接调用函数<br><a href="https://imgchr.com/i/VWOZE8" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/13/VWOZE8.jpg" alt="VWOZE8.jpg"></a></p></li><li><p><strong>prefix</strong> 一系列string类型。如果显示，属性必须加上某些定义的前缀。每个属性名反过来与列表中的每个前缀进行比较，一个找到一个匹配，这个前缀被提取出来为属性创建基本的名字。前缀列表中不包含任何前缀也是合法的，为空则总是匹配。字符都是字母，紧接着前缀后的字符一定不能是小写字母。例如，pepper对前缀p不是相等匹配，而跟pEpper是匹配的(也就意味着属性的基本名字是epper)。<br><a href="https://imgchr.com/i/VWOm4g" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/13/VWOm4g.png" alt="VWOm4g.png"></a></p></li></ol><p>也就是在属性上增加注解，在类上的注解就会自动忽略；<br>使用前缀，匹配有前缀+大写字母这样的匹配才能自动生成忽略前缀的get方法和set方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Lombok 是一个jar包，可以节约很多敲代码的工作，适当的为自己增加一点趁手的工作。&lt;br&gt;官网地址：&lt;a href=&quot;https://projectlombok.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://projectlombok.org/&lt;/a&gt;&lt;br&gt;最常用的就是@Data，@Log&lt;br&gt;最近在使用idea，就记录一下在这个下面使用的方式吧。&lt;/p&gt;
    
    </summary>
    
      <category term="代码工具" scheme="https://jelly54.github.io/categories/%E4%BB%A3%E7%A0%81%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="lombok" scheme="https://jelly54.github.io/tags/lombok/"/>
    
      <category term="plugin" scheme="https://jelly54.github.io/tags/plugin/"/>
    
  </entry>
  
  <entry>
    <title>springboot-整合redis实现发送短信验证码</title>
    <link href="https://jelly54.github.io/2019/03/04/springboot-%E6%95%B4%E5%90%88redis%E5%AE%9E%E7%8E%B0%E5%8F%91%E9%80%81%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>https://jelly54.github.io/2019/03/04/springboot-整合redis实现发送短信验证码/</id>
    <published>2019-03-04T07:50:16.000Z</published>
    <updated>2019-06-03T08:34:11.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springboot-整合redis实现发送短信验证码"><a href="#springboot-整合redis实现发送短信验证码" class="headerlink" title="springboot-整合redis实现发送短信验证码"></a>springboot-整合redis实现发送短信验证码</h1><p>用户登录时可以选择使用手机号加验证码的形式进行快速验证登录。<br>整体逻辑，用户输入手机号，点击发送验证码；后台收到手机号，生成指定位数的验证码，存入redis中（设定过期时间）并发送短信。若在过期时间内用户再次点击发送验证码按钮，现在redis中查询当前手机号是否有验证码缓存，有的话读取缓存中验证码更新过期时间并返回，否则生成新的验证码返回。</p><a id="more"></a><h1 id="所需软件"><a href="#所需软件" class="headerlink" title="所需软件"></a>所需软件</h1><ol><li>Redis-x64-3.2.100 （我是在windows本地的，远程也可以）</li><li>阿里云短信平台（需要付费, 后边有介绍）</li><li>Spring Boot项目</li></ol><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><p>本地搭建，使用redis客户端<br>线上搭建，使用redis服务器</p><p><a href="http://note.youdao.com/yws/public/resource/dc8a69446a640f559ecd641baaf71651/xmlnote/A3CF5B6BE62442CB91AE1FBD194AC943/9286" target="_blank" rel="noopener">Windows的Redis下载</a></p><p>解压到一个文件夹内<br><img src="https://s2.ax1x.com/2019/06/03/VJWKSA.png" alt="VJWKSA.png"><br>编辑一个文本文件，内容为<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server  redis.windows.conf</span><br></pre></td></tr></table></figure></p><p>将文本文件名称改为：startup.bat</p><p>双击  startup.bat  看到redis启动的标志图标即为成功了。 </p><p>双击redis-cli.exe可以启动redis的客户端，查看当前redis中有什么。</p><h1 id="Ali的短信平台"><a href="#Ali的短信平台" class="headerlink" title="Ali的短信平台"></a>Ali的短信平台</h1><p>短信平台是阿里云的，需要付费购买服务，购买地址：<br><a href="https://common-buy.aliyun.com/?spm=5176.8195934.907839.sms6.312c4183mzE9Yb&amp;&amp;commodityCode=newdysmsbag#/buy" target="_blank" rel="noopener">https://common-buy.aliyun.com/?spm=5176.8195934.907839.sms6.312c4183mzE9Yb&amp;&amp;commodityCode=newdysmsbag#/buy</a></p><p>付费完成后，首先申请短信签名和短信模板：<a href="https://help.aliyun.com/document_detail/55327.html?spm=a2c4g.11186623.6.549.huzd56。" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/55327.html?spm=a2c4g.11186623.6.549.huzd56。</a></p><ul><li><p><strong>短信签名：</strong> 根据用户属性来创建符合自身属性的签名信息。企业用户需要上传相关企业资质证明，个人用户需要上传证明个人身份的证明。注意：短信签名需要审核通过后才可以使用。</p></li><li><p><strong>短信模板：</strong> 短信模板，即具体发送的短信内容。短信模板可以支持验证码、短信通知、推广短信、国际/港澳台消息四种模式。验证码和短信通知，通过变量替换实现个性短信定制。推广短信不支持在模板中添加变量。短信模板需要审核通过后才可以使用。</p></li><li><p><strong>短信示例：</strong> 【阿里云】 验证码${number}，您正进行支付宝的身份验证，打死不告诉别人！这里的短信签名：阿里云，短信模板: 验证码${number}，您正进行支付宝的身份验证，打死不告诉别人！</p></li><li><p>最后获取 <strong>asscessKeyId</strong> 和 <strong>accessKeySecret</strong>  。结合阿里云提供的开发者文档即可进行接口开发，短信开发api文档：<a href="https://help.aliyun.com/product/44282.html?spm=a2c4g.750001.6.1.T84wBi" target="_blank" rel="noopener">https://help.aliyun.com/product/44282.html?spm=a2c4g.750001.6.1.T84wBi</a></p></li></ul><h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><h2 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h2><p><img src="https://s2.ax1x.com/2019/06/03/VJWnWd.png" alt="VJWnWd.png"></p><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#--------------------------短信--------------------------</span><br><span class="line">aliyun.sms.access-key-id=****</span><br><span class="line">aliyun.sms.access-key-secret=***</span><br><span class="line">#短信API产品名称（短信产品名固定，无需修改）</span><br><span class="line">aliyun.sms.product=Dysmsapi</span><br><span class="line">#短信API产品域名（接口地址固定，无需修改）</span><br><span class="line">aliyun.sms.domain=dysmsapi.aliyuncs.com</span><br><span class="line"># 初始化acsClient,暂不支持region化</span><br><span class="line">aliyun.sms.region-id=cn-hangzhou</span><br><span class="line">aliyun.sms.endpoint-name=cn-hangzhou</span><br><span class="line">#短信签名-可在短信控制台中找到</span><br><span class="line">aliyun.sms.sign-name=***</span><br><span class="line">aliyun.sms.date-format=yyyyMMdd</span><br><span class="line">aliyun.sms.template-code=SMS_160220108</span><br><span class="line"></span><br><span class="line">#-------------------------Redis--------------------------</span><br><span class="line">spring.redis.host=127.0.0.1</span><br><span class="line">spring.redis.password=</span><br><span class="line">spring.redis.port=6379</span><br><span class="line"></span><br><span class="line">#默认过期时间、如果返回值存在过期时间则使用返回值中的过期时间</span><br><span class="line">ali.tokenExpire=3600</span><br><span class="line">ali.refreshTokenExpire=2592000</span><br><span class="line"># Redis数据库索引（默认为0）</span><br><span class="line">spring.redis.database=0</span><br><span class="line"># Redis服务器地址</span><br><span class="line">spring.redis.host=r-2ze3ede749e90084.redis.rds.aliyuncs.com</span><br><span class="line"># Redis服务器连接端口</span><br><span class="line">spring.redis.port=6379</span><br><span class="line"># Redis服务器连接密码（默认为空）</span><br><span class="line">spring.redis.password=QTOwer*&amp;(192</span><br><span class="line"># 连接超时时间（毫秒）</span><br><span class="line">spring.redis.timeout=5000</span><br><span class="line"># 连接池最大连接数（使用负值表示没有限制） 默认 8</span><br><span class="line">spring.redis.lettuce.pool.max-active=8</span><br><span class="line"># 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1</span><br><span class="line">spring.redis.lettuce.pool.max-wait=-1</span><br><span class="line"># 连接池中的最大空闲连接 默认 8</span><br><span class="line">spring.redis.lettuce.pool.max-idle=8</span><br><span class="line"># 连接池中的最小空闲连接 默认 0</span><br><span class="line">spring.redis.lettuce.pool.min-idle=0</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">## 生成随机码的工具类  </span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public class IdentifyCodeUtil &#123;</span><br><span class="line"> </span><br><span class="line">    public static String getRandom() &#123;</span><br><span class="line">        String num = "";</span><br><span class="line">        for (int i = 0; i <span class="tag">&lt; <span class="attr">6</span>; <span class="attr">i</span>++) &#123;</span></span><br><span class="line"><span class="tag">            <span class="attr">num</span> = <span class="string">num</span> + <span class="attr">String.valueOf</span>((<span class="attr">int</span>) <span class="attr">Math.floor</span>(<span class="attr">Math.random</span>() * <span class="attr">9</span> + <span class="attr">1</span>));</span></span><br><span class="line"><span class="tag">        &#125;</span></span><br><span class="line"><span class="tag">        <span class="attr">return</span> <span class="attr">num</span>;</span></span><br><span class="line"><span class="tag">    &#125;</span></span><br><span class="line"><span class="tag">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="发送短信，查询短信发送情况"><a href="#发送短信，查询短信发送情况" class="headerlink" title="发送短信，查询短信发送情况"></a>发送短信，查询短信发送情况</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.aliyuncs.DefaultAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.IAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.dysmsapi.model.v20170525.QuerySendDetailsRequest;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.dysmsapi.model.v20170525.QuerySendDetailsResponse;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.dysmsapi.model.v20170525.SendSmsRequest;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.dysmsapi.model.v20170525.SendSmsResponse;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.exceptions.ClientException;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.profile.DefaultProfile;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.profile.IClientProfile;</span><br><span class="line"><span class="keyword">import</span> com.qingtengcloud.daisy.utils.log.LogTypeEnum;</span><br><span class="line"><span class="keyword">import</span> com.qingtengcloud.daisy.utils.log.LogUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Jelly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: daisy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019-03-13 12:06</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliSmsSendTool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自动注册短信服务的配置</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;aliyun.sms.access-key-id&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;aliyun.sms.access-key-secret&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;aliyun.sms.product&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String product;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;aliyun.sms.domain&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String domain;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;aliyun.sms.region-id&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String regionId;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;aliyun.sms.endpoint-name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String endpointName;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;aliyun.sms.sign-name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String signName;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;aliyun.sms.date-format&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String dateFormat;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SMS <span class="title">newSMS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SMS();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一个短信实体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SMS</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String phoneNumbers;</span><br><span class="line">        <span class="keyword">private</span> String templateParam;</span><br><span class="line">        <span class="keyword">private</span> String outId;</span><br><span class="line">        <span class="keyword">private</span> String templateCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取短信发送服务机</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> IAcsClient <span class="title">getClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        IClientProfile profile = DefaultProfile.getProfile(regionId, accessKeyId, accessKeySecret);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DefaultProfile.addEndpoint(endpointName, regionId, product, domain);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultAcsClient(profile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取短信请求</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sms</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> SendSmsRequest <span class="title">getRequest</span><span class="params">(SMS sms)</span> </span>&#123;</span><br><span class="line">        SendSmsRequest request = <span class="keyword">new</span> SendSmsRequest();</span><br><span class="line">        <span class="keyword">if</span> (sms.getPhoneNumbers() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            LogUtils.error(AliSmsSendTool.class, LogTypeEnum.TOOLS, <span class="string">"接收短信手机号为空！"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        request.setPhoneNumbers(sms.getPhoneNumbers());</span><br><span class="line">        request.setSignName(signName);</span><br><span class="line">        <span class="keyword">if</span> (sms.getTemplateCode() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            LogUtils.error(AliSmsSendTool.class, LogTypeEnum.TOOLS, <span class="string">"短信模板为空！"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        request.setTemplateCode(sms.getTemplateCode());</span><br><span class="line">        <span class="keyword">if</span> (sms.getTemplateParam() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            LogUtils.error(AliSmsSendTool.class, LogTypeEnum.TOOLS, <span class="string">"模板中替换JSON串de变量为空！"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        request.setTemplateParam(sms.getTemplateParam());</span><br><span class="line">        <span class="keyword">if</span> (sms.getOutId() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            LogUtils.warn(AliSmsSendTool.class, LogTypeEnum.TOOLS, <span class="string">"提供给业务方扩展字段 outId为空！"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            request.setOutId(sms.getOutId());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SendResult</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> SendSmsResponse sendSmsResponse;</span><br><span class="line">        <span class="keyword">private</span> SMS sms;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryResult</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> QuerySendDetailsResponse querySendDetailsResponse;</span><br><span class="line">        <span class="keyword">private</span> Query query;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送短信</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 发送验证码类的短信时，每个号码每分钟最多发送一次，每个小时最多发送5次。</span></span><br><span class="line"><span class="comment">     * 其它类短信频控请参考阿里云</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sms 短信</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SendResult <span class="title">sendSms</span><span class="params">(SMS sms)</span> </span>&#123;</span><br><span class="line">        IAcsClient acsClient = getClient();</span><br><span class="line">        SendSmsRequest request = getRequest(sms);</span><br><span class="line">        SendSmsResponse sendSmsResponse = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (request != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sendSmsResponse = acsClient.getAcsResponse(request);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line">            log.error(<span class="string">"发送短信发生错误。错误代码是 [&#123;&#125;]，错误消息是 [&#123;&#125;]，错误请求ID是 [&#123;&#125;]，错误Msg是 [&#123;&#125;]，错误类型是 [&#123;&#125;]"</span>, e.getErrCode(), e.getMessage(), e.getRequestId(), e.getErrMsg(), e.getErrorType());</span><br><span class="line">            <span class="comment">//错误消息是 [SDK.InvalidRegionId : Can not find endpoint to access.]，错误请求ID是 [null]，错误Msg是 [Can not find endpoint to access.]，错误类型是 [Client]</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        SendResult result = <span class="keyword">new</span> SendResult();</span><br><span class="line">        result.setSendSmsResponse(sendSmsResponse);</span><br><span class="line">        result.setSms(sms);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Query <span class="title">newQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Query();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建一个查询器</span></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Query</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String bizId; <span class="comment">//业务ID</span></span><br><span class="line">        <span class="keyword">private</span> String phoneNumber;</span><br><span class="line">        <span class="keyword">private</span> Date sendDate;</span><br><span class="line">        <span class="keyword">private</span> Long pageSize;</span><br><span class="line">        <span class="keyword">private</span> Long currentPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询短信发送结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> query 查询条件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueryResult <span class="title">querySendDetails</span><span class="params">(Query query)</span> </span>&#123;</span><br><span class="line">        IAcsClient acsClient = getClient();</span><br><span class="line">        QuerySendDetailsRequest request = <span class="keyword">new</span> QuerySendDetailsRequest();</span><br><span class="line">        request.setPhoneNumber(query.getPhoneNumber());</span><br><span class="line">        request.setBizId(query.getBizId());</span><br><span class="line">        SimpleDateFormat ft = <span class="keyword">new</span> SimpleDateFormat(dateFormat);</span><br><span class="line">        request.setSendDate(ft.format(query.getSendDate()));</span><br><span class="line">        request.setPageSize(query.getPageSize());</span><br><span class="line">        request.setCurrentPage(query.getCurrentPage());</span><br><span class="line">        QuerySendDetailsResponse querySendDetailsResponse = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            querySendDetailsResponse = acsClient.getAcsResponse(request);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        QueryResult result = <span class="keyword">new</span> QueryResult();</span><br><span class="line">        result.setQuerySendDetailsResponse(querySendDetailsResponse);</span><br><span class="line">        result.setQuery(query);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="发送短信配置常量类"><a href="#发送短信配置常量类" class="headerlink" title="发送短信配置常量类"></a>发送短信配置常量类</h2><p>sprringboot启动类Application.java加入注解：@EnableCaching<br>   配置redis采用缓存，设置key和value的序列化方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Jelly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019-02-22 09:39</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Constants</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SUCCESS = <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FAILED = <span class="number">101</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String SMS_AUTH_TYPE = <span class="string">"sms"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String SMS_AUTH_CODE = <span class="string">"DaisySms"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String SMS_SEND_STATUS_OK = <span class="string">"OK"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> SMS_EXPIRE_TIME = <span class="number">5</span>*<span class="number">60</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> SMS_CODE_LENGTH = <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">## redis实现类</span><br><span class="line"></span><br><span class="line">保存、获取、删除验证码接口实现方法。(可以使用spring-boot自带的 **stringRedisTemplate** )</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Jelly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: redis操作方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019-03-15 11:33</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRedisTemplate</span><span class="params">(RedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        RedisSerializer stringSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        redisTemplate.setKeySerializer(stringSerializer);</span><br><span class="line">        redisTemplate.setValueSerializer(stringSerializer);</span><br><span class="line">        redisTemplate.setHashKeySerializer(stringSerializer);</span><br><span class="line">        redisTemplate.setHashValueSerializer(stringSerializer);</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(<span class="keyword">final</span> String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ValueOperations&lt;Serializable, Object&gt; operations = redisTemplate.opsForValue();</span><br><span class="line">            operations.set(key, value);</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入缓存设置时效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(<span class="keyword">final</span> String key, Object value, Long expireTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ValueOperations&lt;Serializable, Object&gt; operations = redisTemplate.opsForValue();</span><br><span class="line">            operations.set(key, value);</span><br><span class="line">            redisTemplate.expire(key, expireTime, TimeUnit.SECONDS);</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除对应的value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keys</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">final</span> String... keys)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            remove(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removePattern</span><span class="params">(<span class="keyword">final</span> String pattern)</span> </span>&#123;</span><br><span class="line">        Set&lt;Serializable&gt; keys = redisTemplate.keys(pattern);</span><br><span class="line">        <span class="keyword">if</span> (keys.size() &gt; <span class="number">0</span>)</span><br><span class="line">            redisTemplate.delete(keys);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除对应的value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (exists(key)) &#123;</span><br><span class="line">            redisTemplate.delete(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断缓存中是否有对应的value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        ValueOperations&lt;Serializable, Object&gt; operations = redisTemplate.opsForValue();</span><br><span class="line">        result = operations.get(key);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 哈希 添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hmSet</span><span class="params">(String key, Object hashKey, Object value)</span></span>&#123;</span><br><span class="line">        HashOperations&lt;String, Object, Object&gt; hash = redisTemplate.opsForHash();</span><br><span class="line">        hash.put(key,hashKey,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 哈希获取数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hmGet</span><span class="params">(String key, Object hashKey)</span></span>&#123;</span><br><span class="line">        HashOperations&lt;String, Object, Object&gt;  hash = redisTemplate.opsForHash();</span><br><span class="line">        <span class="keyword">return</span> hash.get(key,hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列表添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lPush</span><span class="params">(String k,Object v)</span></span>&#123;</span><br><span class="line">        ListOperations&lt;String, Object&gt; list = redisTemplate.opsForList();</span><br><span class="line">        list.rightPush(k,v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列表获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> l</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> l1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">lRange</span><span class="params">(String k, <span class="keyword">long</span> l, <span class="keyword">long</span> l1)</span></span>&#123;</span><br><span class="line">        ListOperations&lt;String, Object&gt; list = redisTemplate.opsForList();</span><br><span class="line">        <span class="keyword">return</span> list.range(k,l,l1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String key,Object value)</span></span>&#123;</span><br><span class="line">        SetOperations&lt;String, Object&gt; set = redisTemplate.opsForSet();</span><br><span class="line">        set.add(key,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">setMembers</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        SetOperations&lt;String, Object&gt; set = redisTemplate.opsForSet();</span><br><span class="line">        <span class="keyword">return</span> set.members(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有序集合添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scoure</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">zAdd</span><span class="params">(String key,Object value,<span class="keyword">double</span> scoure)</span></span>&#123;</span><br><span class="line">        ZSetOperations&lt;String, Object&gt; zset = redisTemplate.opsForZSet();</span><br><span class="line">        zset.add(key,value,scoure);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有序集合获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scoure</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scoure1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">rangeByScore</span><span class="params">(String key,<span class="keyword">double</span> scoure,<span class="keyword">double</span> scoure1)</span></span>&#123;</span><br><span class="line">        ZSetOperations&lt;String, Object&gt; zset = redisTemplate.opsForZSet();</span><br><span class="line">        <span class="keyword">return</span> zset.rangeByScore(key, scoure, scoure1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="发送短信接口"><a href="#发送短信接口" class="headerlink" title="发送短信接口"></a>发送短信接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.aliyuncs.dysmsapi.model.v20170525.QuerySendDetailsResponse;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.exceptions.ClientException;</span><br><span class="line"><span class="keyword">import</span> com.qingtengcloud.daisy.protocol.Result;</span><br><span class="line"><span class="keyword">import</span> com.qingtengcloud.daisy.utils.AliSmsSendTool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Jelly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019-03-20 15:11</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISmsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送短信接口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phoneNums     手机号码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> templeteCode  模板代码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> templateParam 模板替换参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClientException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Object <span class="title">sendSms</span><span class="params">(String phoneNums, String templeteCode,</span></span></span><br><span class="line"><span class="function"><span class="params">                            String templateParam )</span> <span class="keyword">throws</span> ClientException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询短信发送明细</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phoneNumber</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bizId       业务流水号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClientException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Result <span class="title">querySendDetails</span><span class="params">(String phoneNumber, String bizId)</span> <span class="keyword">throws</span> ClientException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送短信服务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mobile 手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Result <span class="title">sendMessage</span><span class="params">(String mobile)</span> <span class="keyword">throws</span> NoSuchAlgorithmException</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断验证码是否正确</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mobile</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> identifyCode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Boolean <span class="title">checkIsCorrectCode</span><span class="params">(String mobile, String identifyCode)</span> <span class="keyword">throws</span> NoSuchAlgorithmException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="发送短信实现类"><a href="#发送短信实现类" class="headerlink" title="发送短信实现类"></a>发送短信实现类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.exceptions.ClientException;</span><br><span class="line"><span class="keyword">import</span> com.qingtengcloud.daisy.constant.Constants;</span><br><span class="line"><span class="keyword">import</span> com.qingtengcloud.daisy.constant.ErrorStatus;</span><br><span class="line"><span class="keyword">import</span> com.qingtengcloud.daisy.protocol.Result;</span><br><span class="line"><span class="keyword">import</span> com.qingtengcloud.daisy.service.ISmsService;</span><br><span class="line"><span class="keyword">import</span> com.qingtengcloud.daisy.service.RedisService;</span><br><span class="line"><span class="keyword">import</span> com.qingtengcloud.daisy.utils.AliSmsSendTool;</span><br><span class="line"><span class="keyword">import</span> com.qingtengcloud.daisy.utils.Tools;</span><br><span class="line"><span class="keyword">import</span> com.qingtengcloud.daisy.utils.log.LogTypeEnum;</span><br><span class="line"><span class="keyword">import</span> com.qingtengcloud.daisy.utils.log.LogUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Jelly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019-03-20 15:31</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsService</span> <span class="keyword">implements</span> <span class="title">ISmsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;aliyun.sms.template-code&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String templateCode;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisService redisService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AliSmsSendTool aliSmsSendTool;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送短信服务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mobile</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">sendMessage</span><span class="params">(String mobile)</span> <span class="keyword">throws</span> NoSuchAlgorithmException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(mobile)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.buildFailure(ErrorStatus.MISSING_ARGUMENT);</span><br><span class="line">        &#125;</span><br><span class="line">        String identifyCode;</span><br><span class="line">        <span class="comment">//1. 判断是否缓存该账号验证码</span></span><br><span class="line">        String returnCode = (String) redisService.get(Constants.SMS_AUTH_CODE + Tools.MD5(Constants.SMS_AUTH_CODE + mobile));</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(returnCode)) &#123;</span><br><span class="line">            LogUtils.info(SmsService.class, LogTypeEnum.REDIS, <span class="string">"Redis中存在验证码 "</span>);</span><br><span class="line">            identifyCode = returnCode.substring(Constants.SMS_CODE_LENGTH);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            identifyCode = Tools.smsCodeUtil();</span><br><span class="line">            LogUtils.info(SmsService.class, LogTypeEnum.TOOLS, <span class="string">"生成新的验证码 "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.发送短信</span></span><br><span class="line">        Map&lt;String, String&gt; codeMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        codeMap.put(<span class="string">"code"</span>, identifyCode);</span><br><span class="line">        AliSmsSendTool.SendResult response;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response = sendSms(mobile, templateCode, JSON.toJSONString(codeMap));</span><br><span class="line">            <span class="comment">//短信发送成功后存入redis</span></span><br><span class="line">            <span class="keyword">if</span> (response != <span class="keyword">null</span> &amp;&amp; Constants.SMS_SEND_STATUS_OK.equalsIgnoreCase(response.getSendSmsResponse().getCode())) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> redis = redisService.set(Constants.SMS_AUTH_CODE + Tools.MD5(Constants.SMS_AUTH_CODE + mobile), identifyCode + mobile, Constants.SMS_EXPIRE_TIME );</span><br><span class="line">                <span class="keyword">if</span> (!redis) &#123;</span><br><span class="line">                    LogUtils.error(SmsService.class, LogTypeEnum.REDIS, <span class="string">"Redis存储错误 "</span>);</span><br><span class="line">                    <span class="keyword">return</span> Result.buildFailure(ErrorStatus.INTERNAL_SERVER_ERROR);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> Result.buildSuccess(response);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Result.buildFailure(ErrorStatus.SERVICE_EXCEPTION);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LogUtils.error(SmsService.class, LogTypeEnum.SMS, <span class="string">"sendMessage method invoke error: "</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.buildFailure(ErrorStatus.INTERNAL_SERVER_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送短信接口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mobile       手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> templeteCode 模板代码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param        模板替换参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 发送结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClientException 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AliSmsSendTool.<span class="function">SendResult <span class="title">sendSms</span><span class="params">(String mobile, String templeteCode, String param)</span> <span class="keyword">throws</span> ClientException </span>&#123;</span><br><span class="line">        AliSmsSendTool.SMS sms = AliSmsSendTool.newSMS();</span><br><span class="line">        sms.setPhoneNumbers(mobile);</span><br><span class="line">        sms.setTemplateParam(param);<span class="comment">//code有要求 "message":"params must be [a-zA-Z0-9] for verification sms"</span></span><br><span class="line">        sms.setTemplateCode(templeteCode);</span><br><span class="line">        AliSmsSendTool.SendResult sendResult = aliSmsSendTool.sendSms(sms);</span><br><span class="line">        <span class="keyword">if</span> (sendResult == <span class="keyword">null</span> || !sendResult.getSendSmsResponse().getCode().equals(Constants.SMS_SEND_STATUS_OK)) &#123;</span><br><span class="line">            LogUtils.error(SmsService.class, LogTypeEnum.SMS, <span class="string">"发送短信失败 "</span>, sendResult);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LogUtils.info(SmsService.class, LogTypeEnum.SMS, <span class="string">"发送短信 成功 "</span>, sendResult);</span><br><span class="line">        <span class="keyword">return</span> sendResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断验证码是否正确</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mobile</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> identifyCode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">checkIsCorrectCode</span><span class="params">(String mobile, String identifyCode)</span> <span class="keyword">throws</span> NoSuchAlgorithmException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(mobile) || StringUtils.isEmpty(identifyCode)) &#123;</span><br><span class="line">            LogUtils.error(SmsService.class, LogTypeEnum.SMS, <span class="string">"验证码校验失败，手机号或验证码错误"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String returnCode = <span class="keyword">null</span>;</span><br><span class="line">        returnCode = (String) redisService.get(Constants.SMS_AUTH_CODE + Tools.MD5(Constants.SMS_AUTH_CODE + mobile));</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(returnCode) &amp;&amp; returnCode.substring(<span class="number">0</span>, Constants.SMS_CODE_LENGTH).equals(identifyCode) &amp;&amp; returnCode.substring(Constants.SMS_CODE_LENGTH).equals(mobile)) &#123;</span><br><span class="line">            LogUtils.info(SmsService.class, LogTypeEnum.SMS, <span class="string">"验证码校验成功"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LogUtils.error(SmsService.class, LogTypeEnum.SMS, <span class="string">"验证码校验失败"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询短信发送明细</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phoneNumber</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bizId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClientException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">querySendDetails</span><span class="params">(String phoneNumber, String bizId)</span> <span class="keyword">throws</span> ClientException </span>&#123;</span><br><span class="line">        AliSmsSendTool.Query query = <span class="keyword">new</span> AliSmsSendTool.Query();</span><br><span class="line">        query.setBizId(bizId);</span><br><span class="line">        query.setCurrentPage(<span class="number">1L</span>);</span><br><span class="line">        query.setPageSize(<span class="number">10L</span>);</span><br><span class="line">        query.setPhoneNumber(phoneNumber);</span><br><span class="line">        query.setSendDate(<span class="keyword">new</span> Date());</span><br><span class="line"><span class="comment">//        // 查询发送结果</span></span><br><span class="line">        AliSmsSendTool.QueryResult queryResult = aliSmsSendTool.querySendDetails(query);</span><br><span class="line">        <span class="keyword">if</span> (queryResult == <span class="keyword">null</span>) &#123;</span><br><span class="line">            LogUtils.error(SmsService.class, LogTypeEnum.SMS, <span class="string">"没有该短信记录 "</span>);</span><br><span class="line">            <span class="keyword">return</span> Result.buildFailure(queryResult);</span><br><span class="line">        &#125;</span><br><span class="line">        LogUtils.info(SmsService.class, LogTypeEnum.SMS, <span class="string">"查找短信记录成功 "</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.buildSuccess(queryResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="发送短信controller类"><a href="#发送短信controller类" class="headerlink" title="发送短信controller类"></a>发送短信controller类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.qingtengcloud.daisy.protocol.Result;</span><br><span class="line"><span class="keyword">import</span> com.qingtengcloud.daisy.service.ISmsService;</span><br><span class="line"><span class="keyword">import</span> com.qingtengcloud.daisy.utils.AliSmsSendTool;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Jelly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019-03-13 12:31</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliSmsSendController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AliSmsSendTool aliSmsSendTool;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ISmsService smsService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送短信验证码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mobile 手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/sms/sendMessage"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">sendMessage</span><span class="params">(@RequestParam String mobile)</span> <span class="keyword">throws</span> NoSuchAlgorithmException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> smsService.sendMessage(mobile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断验证码是否正确</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mobile  手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> identifyCode 确认码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/sms/checkIsCorrectCode"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">checkIsCorrectCode</span><span class="params">(@RequestParam String mobile, @RequestParam String identifyCode)</span> <span class="keyword">throws</span> NoSuchAlgorithmException </span>&#123;</span><br><span class="line">        Boolean isOk = smsService.checkIsCorrectCode(mobile, identifyCode);</span><br><span class="line">        <span class="keyword">if</span> (isOk)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.buildSuccess(<span class="string">"isOk"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.buildFailure(<span class="string">"Fail"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/sms/auto"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">smsTest</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        String mobile = <span class="string">"18846816914"</span>;</span><br><span class="line">        String templateCode = <span class="string">"SMS_160220108"</span>;</span><br><span class="line">        AliSmsSendTool.SMS sms = AliSmsSendTool.newSMS();</span><br><span class="line">        sms.setPhoneNumbers(mobile);</span><br><span class="line">        sms.setTemplateParam(<span class="string">"&#123;\"code\":\"fwzd\"&#125;"</span>);<span class="comment">//code有要求 "message":"params must be [a-zA-Z0-9] for verification sms"</span></span><br><span class="line">        sms.setTemplateCode(templateCode);</span><br><span class="line">        AliSmsSendTool.SendResult sendResult = aliSmsSendTool.sendSms(sms);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        由于响应不及时，不能在这里构建查询，直接查询，smsSendDetailDTOs 会获取到null，</span></span><br><span class="line"><span class="comment">//        可以选择在别处查询，保证用户良好体验，系统响应快。考虑异步方法 线程睡眠5秒再查询，结果保存数据库进行持久化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        // 构建查询</span></span><br><span class="line"><span class="comment">//        AliSmsSendTool.Query query = new AliSmsSendTool.Query();</span></span><br><span class="line"><span class="comment">//        query.setBizId(sendResult.getSendSmsResponse().getBizId());</span></span><br><span class="line"><span class="comment">//        query.setCurrentPage(1L);</span></span><br><span class="line"><span class="comment">//        query.setPageSize(10L);</span></span><br><span class="line"><span class="comment">//        query.setPhoneNumber(sms.getPhoneNumbers());</span></span><br><span class="line"><span class="comment">//        query.setSendDate(new Date());</span></span><br><span class="line"><span class="comment">////        // 查询发送结果</span></span><br><span class="line"><span class="comment">//        AliSmsSendTool.QueryResult queryResult= aliSmsSendTool.querySendDetails(query);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sendResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;springboot-整合redis实现发送短信验证码&quot;&gt;&lt;a href=&quot;#springboot-整合redis实现发送短信验证码&quot; class=&quot;headerlink&quot; title=&quot;springboot-整合redis实现发送短信验证码&quot;&gt;&lt;/a&gt;springboot-整合redis实现发送短信验证码&lt;/h1&gt;&lt;p&gt;用户登录时可以选择使用手机号加验证码的形式进行快速验证登录。&lt;br&gt;整体逻辑，用户输入手机号，点击发送验证码；后台收到手机号，生成指定位数的验证码，存入redis中（设定过期时间）并发送短信。若在过期时间内用户再次点击发送验证码按钮，现在redis中查询当前手机号是否有验证码缓存，有的话读取缓存中验证码更新过期时间并返回，否则生成新的验证码返回。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://jelly54.github.io/categories/SpringBoot/"/>
    
    
      <category term="springboot" scheme="https://jelly54.github.io/tags/springboot/"/>
    
      <category term="框架" scheme="https://jelly54.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="redis" scheme="https://jelly54.github.io/tags/redis/"/>
    
      <category term="验证码" scheme="https://jelly54.github.io/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>springboot-使用枚举整合性别等</title>
    <link href="https://jelly54.github.io/2019/03/03/springboot-%E4%BD%BF%E7%94%A8%E6%9E%9A%E4%B8%BE%E6%95%B4%E5%90%88%E6%80%A7%E5%88%AB%E7%AD%89/"/>
    <id>https://jelly54.github.io/2019/03/03/springboot-使用枚举整合性别等/</id>
    <published>2019-03-03T11:01:09.000Z</published>
    <updated>2019-06-03T08:30:34.883Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用背景"><a href="#使用背景" class="headerlink" title="使用背景"></a>使用背景</h1><p>在项目中需要将数据库中的gender（1男，0女），读取时做一个转换，转换为文字 男、女。同时，有另一个字段 info_tpye(三个不同的类型，数据库存储的是 1，2，3，但是需要展示对应的文字信息)。于是，使用bean对象集成枚举，在读取、插入数据时进行转换。</p><a id="more"></a><blockquote><p>《阿里巴巴Java开发手册》将接口中枚举的使用分为两类，即 接口参数和接口返回值，并规定： 接口参数可以使用枚举类型，但接口返回值不可以使用枚举类型（包括含枚举类型的POJO对象）。</p></blockquote><p><strong>小小讨论：</strong> </p><blockquote><p>Java中出现的任何元素，在Gosling的角度都会有背后的思考和逻辑（尽管并非绝对完美，但Java的顶层抽象已经是天才级了），比如：接口、抽象类、注解、和本文提到的枚举。枚举有好处，类型安全，清晰直接，还可以使用等号来判断，也可以用在switch中。它的劣势也是明显的，就是不要扩展。可是为什么在返回值和参数进行了区分呢，如果不兼容，那么两个都有问题，怎么允许参数可以有枚举。当时的考虑，如果参数也不能用，那么枚举几乎无用武之地了。参数输出，毕竟是本地决定的，你本地有的，传送过去，向前兼容是不会有问题的。但如果是接口返回，就比较恶心了，因为解析回来的这个枚举值，可能本地还没有，这时就会抛出序列化异常。</p><p>比如：你的本地枚举类，有一个天气Enum：SUNNY, RAINY, CLOUDY，如果根据天气计算心情的方法：guess(WeatcherEnum xx)，传入这三个值都是可以的。返回值：Weather guess(参数)，那么对方运算后，返回一个SNOWY，本地枚举里没有这个值，傻眼了</p></blockquote><h2 id="定义接口-和-枚举类"><a href="#定义接口-和-枚举类" class="headerlink" title="定义接口 和 枚举类"></a>定义接口 和 枚举类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ValueEnum</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DescriptionEnum</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">description</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Gender implements ValueEnum&lt;Integer&gt;,DescriptionEnum &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 性别男</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MALE(<span class="number">1</span>,<span class="string">"男"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 性别女</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FEMALE(<span class="number">2</span>,<span class="string">"女"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    Gender(Integer value,String description) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">description</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">有个使用Gender的pojo类User（<span class="meta">@Data</span>为lombok注解）</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Gender gender;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用枚举作为接口参数"><a href="#使用枚举作为接口参数" class="headerlink" title="使用枚举作为接口参数"></a>使用枚举作为接口参数</h2><p>　<br>Spring 默认使用Bean接收枚举参数时支持 字面量，这也是我们常见的做法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserCommand</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Gender gender;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"添加用户"</span>)</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">users</span><span class="params">(User command)</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        BeanUtils.copyProperties(command,user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/06/03/VJR8PJ.png" alt="VJR8PJ.png"></p><p>注意这种方式不支持枚举的ordinal值</p><h2 id="使用Json接收枚举参数"><a href="#使用Json接收枚举参数" class="headerlink" title="使用Json接收枚举参数"></a>使用Json接收枚举参数</h2><p>Json数据都放在请求体中，后台使用注解 @RequestBody+command bean接收（也可以从HttpServletRequest的getInputStream获取）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(<span class="string">"添加用户"</span>)</span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">users</span><span class="params">(@RequestBody UserCommand userCommand)</span> </span>&#123;</span><br><span class="line">     User user = <span class="keyword">new</span> User();</span><br><span class="line">     BeanUtils.copyProperties(userCommand,user);</span><br><span class="line">     <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式支持字面量，ordinary　　</p><h2 id="自定义-RequestBody-和-ResponseBody处理枚举参数"><a href="#自定义-RequestBody-和-ResponseBody处理枚举参数" class="headerlink" title="自定义@RequestBody 和@ResponseBody处理枚举参数"></a>自定义@RequestBody 和@ResponseBody处理枚举参数</h2><p>单独使用@JsonValue<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Gender implements ValueEnum&lt;Integer&gt;,DescriptionEnum&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 性别男</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MALE(<span class="number">10</span>,<span class="string">"男"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 性别女</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FEMALE(<span class="number">20</span>,<span class="string">"女"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    Gender(Integer value,String description) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">description</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonValue</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>@JsonValue</strong> 决定了序列化的字段，表明该枚举类型只能使用该字段值传值。它可标注在字段和getter方法上，推荐标注在getter方法上。因为标注在字段上，swagger参数列表只显示字面值，但实际不能使用字面值传值，这样会给使用该接口的开发人员造成误解。<br>标注value字段上:<br><img src="https://s2.ax1x.com/2019/06/03/VJR7zn.png" alt="VJR7zn.png"></p><p>标注在value方法上<br><img src="https://s2.ax1x.com/2019/06/03/VJRjdU.png" alt="VJRjdU.png"></p><p>这种方案虽然简单，但是只能单独使用某个字段传值。</p><h2 id="使用-JsonValue-JsonCreator-代码如下"><a href="#使用-JsonValue-JsonCreator-代码如下" class="headerlink" title="使用@JsonValue+@JsonCreator,代码如下"></a>使用@JsonValue+@JsonCreator,代码如下</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Gender implements ValueEnum&lt;Integer&gt;,DescriptionEnum&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 性别男</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MALE(<span class="number">10</span>,<span class="string">"男"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 性别女</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FEMALE(<span class="number">20</span>,<span class="string">"女"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    Gender(Integer value,String description) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonValue</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">description</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonCreator</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Gender <span class="title">create</span><span class="params">(String value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Gender.valueOf(value);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IllegalArgumentException e)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Gender gender : Gender.values()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (gender.value.equals(Integer.parseInt(value))) &#123;</span><br><span class="line">                        <span class="keyword">return</span> gender;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">catch</span> (NumberFormatException n) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (gender.description.equals(value)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> gender;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No element matches "</span>+value);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@JsonValue</strong> 是可选的，标注在getter方法上或者字段上，但是标注字段上Swagger显示参数不起作用，它可决定枚举反序列化的字段。如下<br><img src="https://s2.ax1x.com/2019/06/03/VJWPQ1.png" alt="VJWPQ1.png"></p><p><strong>@JsonCreator</strong> 标注在静态方法上，表明使用该方法序列化和反序列化，方法内部是序列化的逻辑</p><p>上面的示例代码可使用三种方式传值。枚举类型的字面值，value属性或description属性，。这种方案就比较灵活可以任意决定一个或多个字段传值</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># application.properties中</span><br><span class="line">mybatis-plus.type-handlers-package=com.qingtengcloud.utils.enumHandler</span><br><span class="line">mybatis-plus.type-enums-package=com.qingtengcloud.utils.enums</span><br></pre></td></tr></table></figure><h2 id="bean对象"><a href="#bean对象" class="headerlink" title="bean对象"></a>bean对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BTenant</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 租客名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 性别：1男 2女</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> GenderEnum gender;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 0 无类型 1-有效未推送、2-蛋壳无效、3-其他</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BTenantInfoTypeEnum infoType;</span><br><span class="line">    </span><br><span class="line">    ****get、set方法</span><br></pre></td></tr></table></figure><h2 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> GenderEnum &#123;</span><br><span class="line">    OTHER(<span class="string">"0"</span>, <span class="string">"未知"</span>),</span><br><span class="line">    MAN(<span class="string">"1"</span>, <span class="string">"男"</span>),</span><br><span class="line">    FEMALE(<span class="string">"2"</span>, <span class="string">"女"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, GenderEnum&gt; genderEnumMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (GenderEnum sexEnum : GenderEnum.values()) &#123;</span><br><span class="line">            genderEnumMap.put(sexEnum.getKey(), sexEnum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有化构造函数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">GenderEnum</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Title</span>: getGenderEnumByKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 依据key获取枚举</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GenderEnum <span class="title">getGenderEnumByKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> genderEnumMap.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonValue</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonCreator</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GenderEnum <span class="title">create</span><span class="params">(String value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> GenderEnum.valueOf(value);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IllegalArgumentException e)&#123;</span><br><span class="line">            <span class="keyword">for</span> (GenderEnum gender : GenderEnum.values()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (gender.value.equals(Integer.parseInt(value))) &#123;</span><br><span class="line">                        <span class="keyword">return</span> gender;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">catch</span> (NumberFormatException n) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (gender.value.equals(value)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> gender;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No element matches "</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">## 枚举控制器</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenderEnumHandler</span> <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">GenderEnum</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于定义设置参数时，该如何把Java类型的参数转换为对应的数据库类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i, GenderEnum parameter, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">// baseTypeHandler已经帮我们做了parameter的null判断</span></span><br><span class="line">        <span class="comment">// 第二个参数 : 存入到数据库中的值</span></span><br><span class="line">        ps.setString(i, parameter.getKey());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于定义通过字段名称获取字段数据时，如何把数据库类型转换为对应的Java类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GenderEnum <span class="title">getNullableResult</span><span class="params">(ResultSet rs, String columnName)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">// 根据数据库存储类型决定获取类型，本例子中数据库中存放String类型</span></span><br><span class="line">        String key = rs.getString(columnName);</span><br><span class="line">        <span class="keyword">if</span> (rs.wasNull()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 根据数据库中的key值，定位GenderEnum子类</span></span><br><span class="line">            <span class="keyword">return</span> GenderEnum.getGenderEnumByKey(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于定义通过字段索引获取字段数据时，如何把数据库类型转换为对应的Java类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GenderEnum <span class="title">getNullableResult</span><span class="params">(ResultSet rs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">// 根据数据库存储类型决定获取类型，本例子中数据库中存放String类型</span></span><br><span class="line">        String key = rs.getString(columnIndex);</span><br><span class="line">        <span class="keyword">if</span> (rs.wasNull()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 根据数据库中的key值，定位GenderEnum子类</span></span><br><span class="line">            <span class="keyword">return</span> GenderEnum.getGenderEnumByKey(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用定义调用存储过程后，如何把数据库类型转换为对应的Java类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GenderEnum <span class="title">getNullableResult</span><span class="params">(CallableStatement cs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">// 根据数据库存储类型决定获取类型，本例子中数据库中存放String类型</span></span><br><span class="line">        String key = cs.getString(columnIndex);</span><br><span class="line">        <span class="keyword">if</span> (cs.wasNull()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 根据数据库中的key值，定位GenderEnum子类</span></span><br><span class="line">            <span class="keyword">return</span> GenderEnum.getGenderEnumByKey(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用背景&quot;&gt;&lt;a href=&quot;#使用背景&quot; class=&quot;headerlink&quot; title=&quot;使用背景&quot;&gt;&lt;/a&gt;使用背景&lt;/h1&gt;&lt;p&gt;在项目中需要将数据库中的gender（1男，0女），读取时做一个转换，转换为文字 男、女。同时，有另一个字段 info_tpye(三个不同的类型，数据库存储的是 1，2，3，但是需要展示对应的文字信息)。于是，使用bean对象集成枚举，在读取、插入数据时进行转换。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://jelly54.github.io/categories/SpringBoot/"/>
    
    
      <category term="springboot" scheme="https://jelly54.github.io/tags/springboot/"/>
    
      <category term="枚举映射" scheme="https://jelly54.github.io/tags/%E6%9E%9A%E4%B8%BE%E6%98%A0%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>mybatis-plus入坑指南</title>
    <link href="https://jelly54.github.io/2019/03/02/mybatis-plus%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/"/>
    <id>https://jelly54.github.io/2019/03/02/mybatis-plus入坑指南/</id>
    <published>2019-03-02T08:12:33.000Z</published>
    <updated>2019-06-02T09:12:15.221Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mybatis-plus入坑指南"><a href="#mybatis-plus入坑指南" class="headerlink" title="mybatis-plus入坑指南"></a>mybatis-plus入坑指南</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p></blockquote><a id="more"></a><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>无侵入：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li>损耗小：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li>强大的 CRUD 操作：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li>支持 Lambda 形式调用：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li>支持多种数据库：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer2005、SQLServer 等多种数据库</li><li>支持主键自动生成：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li>支持 XML 热加载：Mapper 对应的 XML 支持热加载，对于简单的 CRUD 操作，甚至可以无 XML 启动</li><li>支持 ActiveRecord 模式：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li>支持自定义全局通用操作：支持全局通用方法注入（ Write once, use anywhere ）</li><li>支持关键词自动转义：支持数据库关键词（order、key……）自动转义，还可自定义关键词</li><li>内置代码生成器：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li>内置分页插件：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li>内置性能分析插件：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li>内置全局拦截插件：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li><li>内置 Sql 注入剥离器：支持 Sql 注入剥离，有效预防 Sql 注入攻击</li></ul><h2 id="框架结构"><a href="#框架结构" class="headerlink" title="框架结构"></a>框架结构</h2><p><img src="https://mp.baomidou.com/img/mybatis-plus-framework.jpg" alt="框架结构"></p><p>好了官网的简介完了，附上github地址：Mybatis-plus的GIthub</p><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><blockquote><p>代码生成器，又被叫做逆向工程，MyBatis官方为了推广，自己也写了一个，我之前也使用这个，功能也是非常强大，强大以为支持自定义配置，那么问题来了，我该怎么配置才合理呢，所以，有人把所有的配置项都弄成中文的，还有人开发了生成插件，这些在我以往的博文中都看看到。MyBatis-Plus的代码生成器到底怎么样，这我就不评判了，我就这样说，用用看吧。</p></blockquote><p>在MyBatis-Plus的官网文档中，有将代码生成器的问题，有配置详解，也有项目示例代码，复制来就可用。</p><h2 id="功能列表："><a href="#功能列表：" class="headerlink" title="功能列表："></a>功能列表：</h2><ul><li><p>[x] 自动生成model类</p></li><li><p>[x] 自动生成dao接口</p></li><li><p>[x] 自动生成xml文件</p></li><li><p>[x] 自动生成service接口</p></li><li><p>[x] 自动生成service实现类</p></li><li><p>[x] model支持Builder模式</p></li><li><p>[x] 支持swagger2</p></li><li><p>[x] 支持生成数据库字段常量</p></li><li><p>[x] 支持生成Kotlin代码</p></li><li><p>[] ……</p></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>无论SSM项目还是SpringBoot项目，在原来基础上添加以下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加包扫描"><a href="#添加包扫描" class="headerlink" title="添加包扫描"></a>添加包扫描</h3><p><strong>springboot项目</strong>  </p><p>在启动类上使用注解扫描mapper包（dao层）(Spring Boot项目)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.xxx.xxxx.mapper"</span>)</span><br></pre></td></tr></table></figure><p><strong>springMvc项目</strong></p><ul><li>配置 MapperScan</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.baomidou.mybatisplus.samples.quickstart.mapper"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>调整 SqlSessionFactory 为 MyBatis-Plus 的 SqlSessionFactory  </li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h3><p><strong>WARNING</strong></p><p>引入 MyBatis-Plus 之后请不要再次引入 MyBatis 以及 MyBatis-Spring，以避免因版本差异导致的问题。</p><h1 id="Mybatis-plus的配置"><a href="#Mybatis-plus的配置" class="headerlink" title="Mybatis-plus的配置"></a>Mybatis-plus的配置</h1><h2 id="在application-yml中添加数据源"><a href="#在application-yml中添加数据源" class="headerlink" title="在application.yml中添加数据源"></a>在application.yml中添加数据源</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DataSource Config</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/test?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;characterSetResults=utf8</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Logger Config</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line">    <span class="string">com.mybatisplus.demo03:</span> <span class="string">debug</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#MP所支持的application.yml设置 具体参考官方文档https://jobob.gitee.io/mp3doc/中设置部分</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line"><span class="comment">#  config-location: classpath:mybatis/mybatis-config.xml #如果需要使用原生mybatis设置文件，则这里需要指明具体路径</span></span><br><span class="line"><span class="comment">#  mapper-locations: classpath:/mybatis/mapper/*DAO.xml #在resource目录下的写法</span></span><br><span class="line"><span class="comment">#  mapper-locations: classpath:/com/mpspringboot/mapper/xml/*Mapper.xml #在src/main/java下的写法(同时配置POM文件中source属性)</span></span><br><span class="line"><span class="comment">#  mapper-locations: classpath*:/mybatis/mapper/*DAO.xml #Maven多项目模块下使用classpath*写法</span></span><br><span class="line"><span class="comment">#  type-aliases-package: com.XX.entity #设置类名别名扫描位置，设置后可使用类名替代全限定类名，多个package用逗号或者分号分隔</span></span><br><span class="line"><span class="comment">#  type-aliases-super-type: java.lang.Object #请和typeAliasesPackage一起使用，设置后仅会扫描路径下以该类作为父类的域对象 。</span></span><br><span class="line"><span class="comment">#  type-handlers-package: com.XX.handler #设置类型转换类所在的包位置</span></span><br><span class="line"><span class="comment">#  type-enums-package: com.XX.enums #枚举字段扫描，支持实体的枚举字段</span></span><br><span class="line"><span class="comment">#  check-config-location: false #启动时是否检查 MyBatis XML 文件的存在，默认不检查。</span></span><br><span class="line"><span class="comment">#  executor-type: simple #通过该属性可指定 MyBatis 的执行器，默认值为SIMPLE，MyBatis 的执行器总共有三种：</span></span><br><span class="line"><span class="comment">#                         ExecutorType.SIMPLE：该执行器类型不做特殊的事情，为每个语句的执行创建一个新的预处理语句（PreparedStatement）</span></span><br><span class="line"><span class="comment">#                         ExecutorType.REUSE：该执行器类型会复用预处理语句（PreparedStatement）</span></span><br><span class="line"><span class="comment">#                         ExecutorType.BATCH：该执行器类型会批量执行所有的更新语句</span></span><br><span class="line"><span class="comment">#  configuration-properties: classpath:mybatis/config.properties #指定外部化 MyBatis Properties 配置，通过该配置可以抽离配置，实现不同环境的配置部署。</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#MyBatis-Plus 全局策略配置</span></span><br><span class="line"><span class="attr">  global-config:</span></span><br><span class="line"><span class="attr">    refresh:</span> <span class="literal">true</span> <span class="comment">#启动后，修改Target中的XML即可更新对应Mapper的逻辑，用于调试；生产中不要启动</span></span><br><span class="line"><span class="comment">#    sql-parser-cache: true #是否缓存 Sql 解析，默认不缓存。</span></span><br><span class="line"><span class="comment">#    sql-session: com.xxx.SqlSession #单例重用 SqlSession</span></span><br><span class="line"><span class="comment">#    sql-session-factory: com.xxx.SqlSessionFactory #</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#全局配置中关于DB的设置</span></span><br><span class="line"><span class="attr">    db-config:</span></span><br><span class="line"><span class="attr">      db-type:</span> <span class="string">MYSQL</span> <span class="comment">#数据库类型</span></span><br><span class="line"><span class="attr">      capital-mode:</span> <span class="literal">true</span> <span class="comment">#是否开启大写命名，开启后生成SQL语句都为大写；默认不开启。</span></span><br><span class="line"><span class="comment">#      table-prefix: sys #生成的SQL会在表名上增加此前缀</span></span><br><span class="line"><span class="attr">      table-underline:</span> <span class="literal">true</span> <span class="comment">#生成的SQL语句中，表名是否自动加入驼峰转下划线（如SystemUser=&gt;system_user）</span></span><br><span class="line"><span class="attr">      field-strategy:</span> <span class="string">NOT_NULL</span> <span class="comment">#字段更新插入策略  0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"</span></span><br><span class="line"><span class="comment">#                               IGNORED：所有字段都更新和插入</span></span><br><span class="line"><span class="comment">#                               NOT_NULL：只更新和插入非NULL值</span></span><br><span class="line"><span class="comment">#                               NOT_EMPTY：只更新和插入非NULL值且非空字符串</span></span><br><span class="line"><span class="comment">#                               DEFAULT：默认NOT_NULL</span></span><br><span class="line"><span class="attr">      id-type:</span> <span class="string">UUID</span> <span class="comment">#主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";</span></span><br><span class="line"><span class="comment">#                               AUTO(0)：MP自动决定</span></span><br><span class="line"><span class="comment">#                               NONE(1)：生成语句插入null，需要数据库自增时可以使用</span></span><br><span class="line"><span class="comment">#                               INPUT(2)：根据用户输入值</span></span><br><span class="line"><span class="comment">#                               ID_WORKER(3)：全局唯一ID (数字类型唯一ID)</span></span><br><span class="line"><span class="comment">#                               UUID(4)：全局唯一ID UUID</span></span><br><span class="line"><span class="comment">#                               ID_WORKER_STR(5)：全局唯一ID (字符型类型唯一ID)</span></span><br><span class="line"><span class="attr">      column-like:</span> <span class="literal">false</span> <span class="comment">#逻辑删除字段表示未删除的值</span></span><br><span class="line"><span class="attr">      logic-delete-value:</span> <span class="number">1</span> <span class="comment">#逻辑删除字段表示删除的值</span></span><br><span class="line"><span class="attr">      logic-not-delete-value:</span> <span class="number">0</span> <span class="comment">#逻辑删除字段表示未删除的值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">#一部分对原生MyBatis所支持的配置，我建议使用config-location加mybatis-config.xml实现比较清晰，不要在这里使用</span></span><br><span class="line"><span class="comment">#  configuration:</span></span><br><span class="line"><span class="comment">#    mapUnderscoreToCamelCase: true #默认true，是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。</span></span><br><span class="line"><span class="comment">#    aggressive-lazy-loading: true #当设置为 true 的时候，懒加载的对象可能被任何懒属性全部加载，否则，每个属性都按需加载。需要和 lazyLoadingEnabled 一起使用。</span></span><br><span class="line"><span class="comment">#    auto-mapping-unknown-column-behavior: none #MyBatis 自动映射策略，通过该配置可指定 MyBatis 是否并且如何来自动映射数据表字段与对象的属性，总共有 3 种可选值：</span></span><br><span class="line"><span class="comment">#                                               AutoMappingBehavior.NONE：不启用自动映射</span></span><br><span class="line"><span class="comment">#                                               AutoMappingBehavior.PARTIAL：只对非嵌套的 resultMap 进行自动映射</span></span><br><span class="line"><span class="comment">#                                               AutoMappingBehavior.FULL：对所有的 resultMap 都进行自动映射</span></span><br><span class="line"><span class="comment">#    auto-mapping-behavior: partial #MyBatis 自动映射时未知列或未知属性处理策略，通过该配置可指定 MyBatis 在自动映射过程中遇到未知列或者未知属性时如何处理，总共有 3 种可选值：</span></span><br><span class="line"><span class="comment">#                                  AutoMappingUnknownColumnBehavior.NONE：不做任何处理 (默认值)</span></span><br><span class="line"><span class="comment">#                                  AutoMappingUnknownColumnBehavior.WARNING：以日志的形式打印相关警告信息</span></span><br><span class="line"><span class="comment">#                                  AutoMappingUnknownColumnBehavior.FAILING：当作映射失败处理，并抛出异常和详细信息</span></span><br><span class="line"><span class="comment">#    cache-enabled: true #全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存，默认为 true。</span></span><br><span class="line"><span class="comment">#    call-setters-on-nulls: false #指定当结果集中值为 null 的时候是否调用映射对象的 Setter（Map 对象时为 put）方法，通常运用于有 Map.keySet() 依赖或 null 值初始化的情况。</span></span><br><span class="line"><span class="comment">#                                  通俗的讲，即 MyBatis 在使用 resultMap 来映射查询结果中的列，如果查询结果中包含空值的列，则 MyBatis 在映射的时候，不会映射这个字段，这就导致在调用到该字段的时候由于没有映射，取不到而报空指针异常。</span></span><br><span class="line"><span class="comment">#                                  当您遇到类似的情况，请针对该属性进行相关配置以解决以上问题。</span></span><br><span class="line"><span class="comment">#                                  WARNING</span></span><br><span class="line"><span class="comment">#                                  基本类型（int、boolean 等）是不能设置成 null 的。</span></span><br><span class="line"><span class="comment">#    configuration-factory: com.xxx.SampleConfigurationFactory #指定一个提供 Configuration 实例的工厂类。</span></span><br><span class="line">                                    <span class="comment">#该工厂生产的实例将用来加载已经被反序列化对象的懒加载属性值，其必须包含一个签名方法static Configuration getConfiguration()。（从 3.2.3 版本开始）</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="comment"># xml</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:mapper/*Mapper.xml</span></span><br><span class="line">  <span class="comment"># 实体扫描，多个package用逗号或者分号分隔</span></span><br><span class="line"><span class="attr">  type-aliases-package:</span> <span class="string">com.fengwenyi.mp3demo.model</span></span><br><span class="line"><span class="attr">  configuration:</span></span><br><span class="line">    <span class="comment"># 这个配置会将执行的sql打印出来，在开发或测试的时候可以用</span></span><br><span class="line"><span class="attr">    log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><p>将sql打印在控制台中<br><img src="https://img-blog.csdnimg.cn/2019041014201985.png" alt="示例"></p><h1 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h1><h2 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h2><p><strong>① 添加依赖</strong> </p><p>AutoGenerator 是 MyBatis-Plus 的代码生成器，通过 AutoGenerator 可以快速生成 Entity、Mapper、Mapper XML、Service、Controller 等各个模块的代码，极大的提升了开发效率。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>最新版本<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- freemarker 模板引擎 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>最新版本<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>② Generator类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlGenerator</span> </span>&#123;</span><br><span class="line">    <span class="comment">//要生成的表，及输出路径</span></span><br><span class="line">    <span class="keyword">static</span> String[] TO_CREATE_TABLES = <span class="keyword">new</span> String[]&#123;<span class="string">"block"</span>, <span class="string">"channel_origin"</span>, <span class="string">"channel_target"</span>, <span class="string">"order"</span>, <span class="string">"tenant"</span>, <span class="string">"user"</span>, <span class="string">"oauth_user"</span>, <span class="string">"oauth_session_key"</span>&#125;;</span><br><span class="line">    <span class="keyword">static</span> String BASE_OUT_PUT_DIR = <span class="string">"src/main/java"</span>;</span><br><span class="line">    <span class="keyword">static</span> String XML_OUT_PUT_DIR = <span class="string">"src/main/resources/mapper"</span>;</span><br><span class="line">    <span class="keyword">static</span> String AUTHOR = <span class="string">"Jelly"</span>;</span><br><span class="line">    <span class="comment">//配置数据源</span></span><br><span class="line">    <span class="keyword">static</span> String DATA_SOURCE_URL = <span class="string">"jdbc:mysql://localhost:3306/qingteng?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8"</span>;</span><br><span class="line">    <span class="keyword">static</span> String DATA_SOURCE_DRIVER = <span class="string">"com.mysql.cj.jdbc.Driver"</span>;</span><br><span class="line">    <span class="keyword">static</span> String DATA_SOURCE_USER = <span class="string">"root"</span>;</span><br><span class="line">    <span class="keyword">static</span> String DATA_SOURCE_PASSWORD = <span class="string">"123456"</span>;</span><br><span class="line">    <span class="comment">//生成表的父类</span></span><br><span class="line">    <span class="keyword">static</span> String SUPER_CONTROLLER = <span class="string">"com.qingtengcloud.web.v1.base.BaseController"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 代码生成器</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 包配置</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        pc.setParent(<span class="string">"com.qingtengcloud"</span>); <span class="comment">//父包名。如果为空，将下面子包名必须写全部， 否则就只需写子包名</span></span><br><span class="line">        pc.setEntity(<span class="string">"bean"</span>);</span><br><span class="line">        pc.setController(<span class="string">"web.v1"</span>);</span><br><span class="line">        pc.setMapper(<span class="string">"dao"</span>);</span><br><span class="line">        pc.setXml(<span class="string">"mapper"</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 全局配置</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        String projectPath = System.getProperty(<span class="string">"user.dir"</span>);</span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>);<span class="comment">//        否打开输出目录</span></span><br><span class="line">        gc.setOutputDir(BASE_OUT_PUT_DIR); <span class="comment">//生成文件的输出目录</span></span><br><span class="line">        gc.setFileOverride(<span class="keyword">false</span>);<span class="comment">// 是否覆盖文件</span></span><br><span class="line">        gc.setActiveRecord(<span class="keyword">true</span>); <span class="comment">//开启 activeRecord</span></span><br><span class="line">        gc.setEnableCache(<span class="keyword">false</span>);<span class="comment">// xml 二级缓存</span></span><br><span class="line">        gc.setBaseResultMap(<span class="keyword">true</span>); <span class="comment">//xml resultMap</span></span><br><span class="line">        gc.setBaseColumnList(<span class="keyword">true</span>);<span class="comment">//xml columList</span></span><br><span class="line">        gc.setDateType(DateType.SQL_PACK);</span><br><span class="line">        gc.setAuthor(AUTHOR);</span><br><span class="line">        gc.setXmlName(<span class="string">"%sMapper"</span>);<span class="comment">//Mapper xml 命名方式</span></span><br><span class="line">        gc.setMapperName(<span class="string">"%sMapper"</span>);<span class="comment">//mapper 命名方式</span></span><br><span class="line">        gc.setServiceName(<span class="string">"%sService"</span>);<span class="comment">//service 命名方式</span></span><br><span class="line">        gc.setServiceImplName(<span class="string">"%sServiceImpl"</span>);<span class="comment">//service impl 命名方式</span></span><br><span class="line">        gc.setControllerName(<span class="string">"%sController"</span>);<span class="comment">//controller 命名方式</span></span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 数据源配置</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dsc.setUrl(DATA_SOURCE_URL);</span><br><span class="line">        <span class="comment">// dsc.setSchemaName("public");</span></span><br><span class="line">        dsc.setDriverName(DATA_SOURCE_DRIVER);</span><br><span class="line">        dsc.setUsername(DATA_SOURCE_USER);</span><br><span class="line">        dsc.setPassword(DATA_SOURCE_PASSWORD);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  自定义配置</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        InjectionConfig cfg = <span class="keyword">new</span> InjectionConfig() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// to do nothing</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        List&lt;FileOutConfig&gt; focList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        focList.add(<span class="keyword">new</span> FileOutConfig(<span class="string">"templates/mapper.xml.ftl"</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">outputFile</span><span class="params">(TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 自定义输入文件名称</span></span><br><span class="line">                <span class="keyword">return</span> XML_OUT_PUT_DIR + <span class="string">"/"</span> + tableInfo.getEntityName() + <span class="string">"Mapper"</span> + StringPool.DOT_XML;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        cfg.setFileOutConfigList(focList);</span><br><span class="line">        mpg.setCfg(cfg);</span><br><span class="line">        mpg.setTemplate(<span class="keyword">new</span> TemplateConfig().setXml(<span class="keyword">null</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 策略配置</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel); <span class="comment">//数据库表名映射策略，下划线转驼峰命名</span></span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel); <span class="comment">//数据库表字段映射到实体的命名策略，下划线转驼峰命名</span></span><br><span class="line">        strategy.setInclude(TO_CREATE_TABLES);<span class="comment">//需要包含的表名，允许正则表达式（与exclude二选一配置）</span></span><br><span class="line"><span class="comment">//        strategy.setExclude(new String[]&#123;"test"&#125;); // 排除生成的表</span></span><br><span class="line">        strategy.setEntityBuilderModel(<span class="keyword">true</span>);<span class="comment">//是否为构建者模型</span></span><br><span class="line">        strategy.setEntityLombokModel(<span class="keyword">true</span>); <span class="comment">//是否为lombok模型</span></span><br><span class="line">        strategy.setSuperControllerClass(SUPER_CONTROLLER);<span class="comment">//自定义继承的Controller类全称，带包名</span></span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>);<span class="comment">// Controller中驼峰转连字符</span></span><br><span class="line">        strategy.setRestControllerStyle(<span class="keyword">true</span>); <span class="comment">//生成 @RestController 控制器</span></span><br><span class="line">        strategy.setTablePrefix(pc.getModuleName() + <span class="string">"_"</span>);<span class="comment">//表前缀</span></span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line">        <span class="comment">// 选择 freemarker 引擎需要指定如下加，注意 pom 依赖必须有！</span></span><br><span class="line">        mpg.setTemplateEngine(<span class="keyword">new</span> FreemarkerTemplateEngine());</span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CRUD接口"><a href="#CRUD接口" class="headerlink" title="CRUD接口"></a>CRUD接口</h2><h3 id="Mapper-CRUD-接口"><a href="#Mapper-CRUD-接口" class="headerlink" title="Mapper CRUD 接口"></a>Mapper CRUD 接口</h3><p>说明:</p><ul><li>通用 CRUD 封装BaseMapper接口，为 Mybatis-Plus 启动时自动解析实体表关系映射转换为 Mybatis 内部对象注入容器</li><li>泛型 T 为任意实体对象</li><li>参数 Serializable 为任意类型主键 Mybatis-Plus 不推荐使用复合主键约定每一张表都有自己的唯一 id 主键</li><li>对象 Wrapper 为 条件构造器</li></ul><h3 id="Service-CRUD-接口"><a href="#Service-CRUD-接口" class="headerlink" title="Service CRUD 接口"></a>Service CRUD 接口</h3><p>说明:</p><ul><li>通用 Service CRUD 封装IService接口，进一步封装 CRUD 采用 get 查询单行 remove 删除 list 查询集合 page 分页 前缀命名方式区分 Mapper 层避免混淆，</li><li>泛型 T 为任意实体对象</li><li>建议如果存在自定义通用 Service 方法的可能，请创建自己的 IBaseService 继承 Mybatis-Plus 提供的基类</li><li>对象 Wrapper 为 条件构造器</li></ul><h3 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h3><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">orderPagingQueryStatus2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryWrapper&lt;Order&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.lambda().eq(Order::getStatus, <span class="number">0</span>).gt(Order::getCreatedAt,<span class="string">"2019-02-25 12:00:00"</span>);</span><br><span class="line">    <span class="keyword">return</span> list(queryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring xml 方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlParser"</span> <span class="attr">ref</span>=<span class="string">"自定义解析类、可以没有"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dialectClazz"</span> <span class="attr">value</span>=<span class="string">"自定义方言类、可以没有"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Spring boot方式</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.baomidou.cloud.service.*.mapper*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Mapper.java</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 包含街区、租客多表查询(注解和xml同时存在的时候，跳过注解)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 分页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Order&gt; <span class="title">orderPagingQuery</span><span class="params">(Page page, @Param(<span class="string">"operateUserId"</span>)</span> Long operateUserId)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Service.java</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订单分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Page&lt;Order&gt; <span class="title">orderPagingQuery</span><span class="params">(Page&lt;Order&gt; page, Long operate_user_id)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ServiceImpl.java</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订单分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;Order&gt; <span class="title">orderPagingQuery</span><span class="params">(Page&lt;Order&gt; page, Long operateUserId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> page.setRecords(<span class="keyword">this</span>.baseMapper.orderPagingQuery(page, operateUserId));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">Controller.java</span><br><span class="line"> <span class="meta">@GetMapping</span>(value = <span class="string">"/orders"</span> )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">orders</span><span class="params">(@RequestParam(value = <span class="string">"page"</span>, defaultValue = <span class="string">"1"</span>)</span> Integer pn,</span></span><br><span class="line"><span class="function">                         @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"size"</span>, defaultValue = <span class="string">"10"</span>)</span> Integer pageSize, Principal principal) </span>&#123;</span><br><span class="line">        <span class="comment">//获取当前用户的订单,需要另外写</span></span><br><span class="line">        <span class="keyword">long</span> operate_user_id = userService.selectUserByMobile(principal.getName()).getId();</span><br><span class="line">        <span class="comment">//利用mybatis-plus的分页查询</span></span><br><span class="line">        Page&lt;Order&gt; obt = orderService.orderPagingQuery(<span class="keyword">new</span> Page&lt;&gt;(pn, pageSize), operate_user_id);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RetResult(obt);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>同时可以自定义分页</p><h4 id="UserMapper-java"><a href="#UserMapper-java" class="headerlink" title="UserMapper.java"></a>UserMapper.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span></span>&#123;<span class="comment">//可以继承或者不继承BaseMapper</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 查询 : 根据state状态查询用户列表，分页显示</span></span><br><span class="line"><span class="comment">     * 注意!!: 如果入参是有多个,需要加注解指定参数名才能在xml中取值</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 分页对象,xml中可以从里面进行取值,传递参数 Page 即自动分页,必须放在第一位(你可以继承Page实现自己的分页对象)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> state 状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分页对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">IPage&lt;User&gt; <span class="title">selectPageVo</span><span class="params">(Page page, @Param(<span class="string">"state"</span>)</span> Integer state)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="UserMapper-xml"><a href="#UserMapper-xml" class="headerlink" title="UserMapper.xml"></a>UserMapper.xml</h4><p>等同于编写一个普通 list 查询，mybatis-plus 自动替你分页</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectPageVo"</span> <span class="attr">resultType</span>=<span class="string">"com.baomidou.cloud.entity.UserVo"</span>&gt;</span></span><br><span class="line">    SELECT id,name FROM user WHERE state=#&#123;state&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="UserServiceImpl-java"><a href="#UserServiceImpl-java" class="headerlink" title="UserServiceImpl.java"></a>UserServiceImpl.java</h4><p>调用分页方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IPage&lt;User&gt; <span class="title">selectUserPage</span><span class="params">(Page&lt;User&gt; page, Integer state)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 不进行 count sql 优化，解决 MP 无法自动优化 SQL 问题，这时候你需要自己查询 count 部分</span></span><br><span class="line">    <span class="comment">// page.setOptimizeCountSql(false);</span></span><br><span class="line">    <span class="comment">// 当 total 为非 0 时(默认为 0),分页插件不会进行 count 查询</span></span><br><span class="line">    <span class="comment">// 要点!! 分页返回的对象与传入的对象是同一个</span></span><br><span class="line">    <span class="keyword">return</span> userMapper.selectPageVo(page, state));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小问题"><a href="#小问题" class="headerlink" title="小问题"></a>小问题</h3><p>① 使用条件构造器的orderByDesc()等排序功能时会有，idea会报警告，<strong>目前无法解决。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;mybatis-plus入坑指南&quot;&gt;&lt;a href=&quot;#mybatis-plus入坑指南&quot; class=&quot;headerlink&quot; title=&quot;mybatis-plus入坑指南&quot;&gt;&lt;/a&gt;mybatis-plus入坑指南&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="代码工具" scheme="https://jelly54.github.io/categories/%E4%BB%A3%E7%A0%81%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="mybatis-plus" scheme="https://jelly54.github.io/tags/mybatis-plus/"/>
    
      <category term="框架" scheme="https://jelly54.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-392-判断子序列</title>
    <link href="https://jelly54.github.io/2018/11/19/LeetCode-392-%E5%88%A4%E6%96%AD%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <id>https://jelly54.github.io/2018/11/19/LeetCode-392-判断子序列/</id>
    <published>2018-11-19T06:41:28.000Z</published>
    <updated>2018-11-19T06:59:58.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="判断子序列"><a href="#判断子序列" class="headerlink" title="判断子序列"></a>判断子序列</h1><p><a href="https://leetcode-cn.com/problems/is-subsequence/" target="_blank" rel="noopener">LeetCode-392-判断子序列</a></p><blockquote><p>给定字符串 s 和 t ，判断 s 是否为 t 的子序列。</p><p>你可以认为 s 和 t 中仅包含英文小写字母。字符串 t 可能会很长（长度 ~= 500,000），而 s 是个短字符串（长度 &lt;=100）。</p></blockquote><a id="more"></a><blockquote><p>字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，”ace”是”abcde”的一个子序列，而”aec”不是）。</p></blockquote><p><strong>示例 1:</strong></p><ul><li><p>s = “abc”, t = “ahbgdc”</p></li><li><p>返回 true.</p></li></ul><p><strong>示例 2:</strong></p><ul><li><p>s = “axc”, t = “ahbgdc”</p></li><li><p>返回 false.</p></li></ul><p><strong>后续挑战 :</strong></p><p style="text-indent: 2em">如果有大量输入的 S，称作S1, S2, … , Sk 其中 k &gt;= 10亿,你需要依次检查它们是否为 T 的子序列。</p><br><p style="text-indent: 2em">在这种情况下，你会怎样改变代码？</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubsequence</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">        index = t.indexOf(c, index + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度: O(N)</p></li><li><p>空间复杂度：O(1)</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;判断子序列&quot;&gt;&lt;a href=&quot;#判断子序列&quot; class=&quot;headerlink&quot; title=&quot;判断子序列&quot;&gt;&lt;/a&gt;判断子序列&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/is-subsequence/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-392-判断子序列&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定字符串 s 和 t ，判断 s 是否为 t 的子序列。&lt;/p&gt;
&lt;p&gt;你可以认为 s 和 t 中仅包含英文小写字母。字符串 t 可能会很长（长度 ~= 500,000），而 s 是个短字符串（长度 &amp;lt;=100）。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="贪心思想" scheme="https://jelly54.github.io/tags/%E8%B4%AA%E5%BF%83%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-605-种花问题</title>
    <link href="https://jelly54.github.io/2018/11/19/LeetCode-605-%E7%A7%8D%E8%8A%B1%E9%97%AE%E9%A2%98/"/>
    <id>https://jelly54.github.io/2018/11/19/LeetCode-605-种花问题/</id>
    <published>2018-11-19T06:34:51.000Z</published>
    <updated>2018-11-19T06:59:29.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="种花问题"><a href="#种花问题" class="headerlink" title="种花问题"></a>种花问题</h1><p><a href="https://leetcode-cn.com/problems/can-place-flowers/" target="_blank" rel="noopener">LeetCode-605-种花问题</a></p><blockquote><p>假设你有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花卉不能种植在相邻的地块上，它们会争夺水源，两者都会死去。</p></blockquote><blockquote><p>给定一个花坛（表示为一个数组包含0和1，其中0表示没种植花，1表示种植了花），和一个数 n 。能否在不打破种植规则的情况下种入 n 朵花？能则返回True，不能则返回False。</p></blockquote><a id="more"></a><p><strong>示例 1:</strong></p><ul><li><p>输入: flowerbed = [1,0,0,0,1], n = 1</p></li><li><p>输出: True</p></li></ul><p><strong>示例 2:</strong></p><ul><li><p>输入: flowerbed = [1,0,0,0,1], n = 2</p></li><li><p>输出: False</p></li></ul><p><strong>注意:</strong></p><ol><li>数组内已种好的花不会违反种植规则。</li><li>输入的数组长度范围为 [1, 20000]。</li><li>n 是非负整数，且不会超过输入数组的大小。</li></ol><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><blockquote><p>花朵之间至少需要一个单位的间隔，求解是否能种下 n 朵花。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canPlaceFlowers</span><span class="params">(<span class="keyword">int</span>[] flowerbed, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = flowerbed.length;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len &amp;&amp; cnt &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (flowerbed[i] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> pre = i == <span class="number">0</span> ? <span class="number">0</span> : flowerbed[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> next = i == len - <span class="number">1</span> ? <span class="number">0</span> : flowerbed[i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (pre == <span class="number">0</span> &amp;&amp; next == <span class="number">0</span>) &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            flowerbed[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt &gt;= n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：O()</p></li><li><p>空间复杂度：O()</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;种花问题&quot;&gt;&lt;a href=&quot;#种花问题&quot; class=&quot;headerlink&quot; title=&quot;种花问题&quot;&gt;&lt;/a&gt;种花问题&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/can-place-flowers/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-605-种花问题&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假设你有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花卉不能种植在相邻的地块上，它们会争夺水源，两者都会死去。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个花坛（表示为一个数组包含0和1，其中0表示没种植花，1表示种植了花），和一个数 n 。能否在不打破种植规则的情况下种入 n 朵花？能则返回True，不能则返回False。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="贪心思想" scheme="https://jelly54.github.io/tags/%E8%B4%AA%E5%BF%83%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-406-根据身高重建队列</title>
    <link href="https://jelly54.github.io/2018/11/19/LeetCode-406-%E6%A0%B9%E6%8D%AE%E8%BA%AB%E9%AB%98%E9%87%8D%E5%BB%BA%E9%98%9F%E5%88%97/"/>
    <id>https://jelly54.github.io/2018/11/19/LeetCode-406-根据身高重建队列/</id>
    <published>2018-11-19T06:19:24.000Z</published>
    <updated>2018-11-19T06:58:57.089Z</updated>
    
    <content type="html"><![CDATA[<h1 id="根据身高重建队列"><a href="#根据身高重建队列" class="headerlink" title="根据身高重建队列"></a>根据身高重建队列</h1><p><a href="https://leetcode-cn.com/problems/queue-reconstruction-by-height/" target="_blank" rel="noopener">LeetCode-406-根据身高重建队列</a></p><blockquote><p>假设有打乱顺序的一群人站成一个队列。 每个人由一个整数对(h, k)表示，其中h是这个人的身高，k是排在这个人前面且身高大于或等于h的人数。 编写一个算法来重建这个队列。</p></blockquote><a id="more"></a><p><strong>注意：</strong><br>总人数少于1100人。</p><p><strong>示例</strong></p><ul><li><p>输入: [[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]</p></li><li><p>输出: [[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]</p></li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><blockquote><p>一个学生用两个分量 (h, k) 描述，h 表示身高，k 表示排在前面的有 k 个学生的身高比他高或者和他一样高。</p><p><strong>为了使插入操作不影响后续的操作，身高较高的学生应该先做插入操作，否则身高较小的学生原先正确插入的第 k 个位置可能会变成第 k+1 个位置。</strong></p><p><strong>身高降序、k 值升序，</strong> 然后按排好序的顺序插入队列的第 k 个位置中</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[][] reconstructQueue(<span class="keyword">int</span>[][] people) &#123;</span><br><span class="line">    <span class="keyword">if</span> (people == <span class="keyword">null</span> || people.length == <span class="number">0</span> || people[<span class="number">0</span>].length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    Arrays.sort(people, (a, b) -&gt; (a[<span class="number">0</span>] == b[<span class="number">0</span>] ? a[<span class="number">1</span>] - b[<span class="number">1</span>] : b[<span class="number">0</span>] - a[<span class="number">0</span>]));</span><br><span class="line">    List&lt;<span class="keyword">int</span>[]&gt; queue = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>[] p : people) &#123;</span><br><span class="line">        queue.add(p[<span class="number">1</span>], p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> queue.toArray(<span class="keyword">new</span> <span class="keyword">int</span>[queue.size()][]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：O(N*logN)</p></li><li><p>空间复杂度：O(N)</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;根据身高重建队列&quot;&gt;&lt;a href=&quot;#根据身高重建队列&quot; class=&quot;headerlink&quot; title=&quot;根据身高重建队列&quot;&gt;&lt;/a&gt;根据身高重建队列&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/queue-reconstruction-by-height/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-406-根据身高重建队列&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假设有打乱顺序的一群人站成一个队列。 每个人由一个整数对(h, k)表示，其中h是这个人的身高，k是排在这个人前面且身高大于或等于h的人数。 编写一个算法来重建这个队列。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="贪心思想" scheme="https://jelly54.github.io/tags/%E8%B4%AA%E5%BF%83%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-435-无重叠区间</title>
    <link href="https://jelly54.github.io/2018/11/19/LeetCode-435-%E6%97%A0%E9%87%8D%E5%8F%A0%E5%8C%BA%E9%97%B4/"/>
    <id>https://jelly54.github.io/2018/11/19/LeetCode-435-无重叠区间/</id>
    <published>2018-11-19T06:06:17.000Z</published>
    <updated>2018-11-19T06:58:17.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="不重叠区间"><a href="#不重叠区间" class="headerlink" title="不重叠区间"></a>不重叠区间</h1><p><a href="https://leetcode-cn.com/problems/non-overlapping-intervals/" target="_blank" rel="noopener">LeetCode-435-无重叠区间</a></p><blockquote><p>给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。</p></blockquote><a id="more"></a><p><strong>注意:</strong></p><blockquote><p>可以认为区间的终点总是大于它的起点。<br>区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。</p></blockquote><p><strong>示例 1:</strong></p><ul><li>输入: [ [1,2], [2,3], [3,4], [1,3] ]</li><li>输出: 1</li></ul><p><strong>解释:</strong>  移除 [1,3] 后，剩下的区间没有重叠。</p><p><strong>示例 2:</strong></p><ul><li>输入: [ [1,2], [1,2], [1,2] ]</li><li>输出: 2</li></ul><p><strong>解释:</strong> 你需要移除两个 [1,2] 来使剩下的区间没有重叠。</p><p><strong>示例 3:</strong></p><ul><li>输入: [ [1,2], [2,3] ]</li><li>输出: 0</li></ul><p><strong>解释:</strong>  你不需要移除任何区间，因为它们已经是无重叠的了。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><blockquote><p>先计算最多能组成的不重叠区间个数，然后用区间总个数减去不重叠区间的个数。</p><p>在每次选择中，区间的结尾最为重要，选择的区间结尾越小，留给后面的区间的空间越大，那么后面能够选择的区间个数也就越大。</p><p>按区间的结尾进行排序，每次选择结尾最小，并且和前一个区间不重叠的区间。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for an interval.</span></span><br><span class="line"><span class="comment"> * public class Interval &#123;</span></span><br><span class="line"><span class="comment"> *     int start;</span></span><br><span class="line"><span class="comment"> *     int end;</span></span><br><span class="line"><span class="comment"> *     Interval() &#123; start = 0; end = 0; &#125;</span></span><br><span class="line"><span class="comment"> *     Interval(int s, int e) &#123; start = s; end = e; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">eraseOverlapIntervals</span><span class="params">(Interval[] intervals)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(intervals.length == <span class="number">0</span>)</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     Arrays.sort(intervals, Comparator.comparingInt(o -&gt; o.end));</span><br><span class="line">      <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> end = intervals[<span class="number">0</span>].end;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;intervals.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(intervals[i].start &lt; end)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            end = intervals[i].end;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> intervals.length - cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 lambda 表示式创建 Comparator 会导致算法运行时间过长，<br>如果注重运行时间，可以修改为普通创建 Comparator 语句：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arrays.sort(intervals, <span class="keyword">new</span> Comparator&lt;Interval&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Interval o1, Interval o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o1.end - o2.end;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度： O(N*logN)</p></li><li><p>空间复杂度： O(1)</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;不重叠区间&quot;&gt;&lt;a href=&quot;#不重叠区间&quot; class=&quot;headerlink&quot; title=&quot;不重叠区间&quot;&gt;&lt;/a&gt;不重叠区间&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/non-overlapping-intervals/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-435-无重叠区间&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="贪心思想" scheme="https://jelly54.github.io/tags/%E8%B4%AA%E5%BF%83%E6%80%9D%E6%83%B3/"/>
    
      <category term="不重叠区间" scheme="https://jelly54.github.io/tags/%E4%B8%8D%E9%87%8D%E5%8F%A0%E5%8C%BA%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-452-用最少数量的箭引爆气球</title>
    <link href="https://jelly54.github.io/2018/11/13/LeetCode-452-%E7%94%A8%E6%9C%80%E5%B0%91%E6%95%B0%E9%87%8F%E7%9A%84%E7%AE%AD%E5%BC%95%E7%88%86%E6%B0%94%E7%90%83/"/>
    <id>https://jelly54.github.io/2018/11/13/LeetCode-452-用最少数量的箭引爆气球/</id>
    <published>2018-11-13T07:18:56.000Z</published>
    <updated>2018-11-13T08:35:23.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用最少数量的箭引爆气球"><a href="#用最少数量的箭引爆气球" class="headerlink" title="用最少数量的箭引爆气球"></a>用最少数量的箭引爆气球</h1><p><a href="https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/" target="_blank" rel="noopener">LeetCode-cn-452-用最少数量的箭引爆气球</a></p><blockquote><p>在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。由于它是水平的，所以y坐标并不重要，因此只要知道开始和结束的x坐标就足够了。开始坐标总是小于结束坐标。平面内最多存在104个气球。</p></blockquote><a id="more"></a><blockquote><p>一支弓箭可以沿着x轴从不同点完全垂直地射出。在坐标x处射出一支箭，若有一个气球的直径的开始和结束坐标为 xstart，xend， 且满足  xstart ≤ x ≤ xend，则该气球会被引爆。可以射出的弓箭的数量没有限制。 弓箭一旦被射出之后，可以无限地前进。我们想找到使得所有气球全部被引爆，所需的弓箭的最小数量。</p></blockquote><p><strong>Example:</strong> </p><ul><li>输入: [[10,16], [2,8], [1,6], [7,12]]</li><li>输出: 2</li></ul><p><strong>解释:</strong><br>对于该样例，我们可以在x = 6（射爆[2,8],[1,6]两个气球）和 x = 11（射爆另外两个气球）。  </p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><blockquote><p><strong>题目描述：</strong> 计算让一组区间不重叠所需要移除的区间个数。  </p></blockquote><blockquote><p>先计算最多能组成的不重叠区间个数，然后用区间总个数减去不重叠区间的个数。  </p></blockquote><blockquote><p>在每次选择中，<strong>区间的结尾最为重要</strong> 选择的区间结尾越小，留给后面的区间的空间越大，那么后面能够选择的区间个数也就越大。  </p></blockquote><blockquote><p><strong>按区间的结尾进行排序</strong> ，每次选择 <strong>结尾最小，并且和前一个区间不重叠的区间</strong> </p></blockquote><pre><code class="java"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMinArrowShots</span><span class="params">(<span class="keyword">int</span>[][] points)</span> </span>{        <span class="keyword">if</span> (points.length == <span class="number">0</span>) {            <span class="keyword">return</span> <span class="number">0</span>;        }        Arrays.sort(points,<span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;() {            <span class="meta">@Override</span>            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] p1, <span class="keyword">int</span>[] p2)</span> </span>{                <span class="keyword">return</span> p1[<span class="number">1</span>] - p2[<span class="number">1</span>];            }        });        <span class="keyword">int</span> cnt = <span class="number">1</span>, end = points[<span class="number">0</span>][<span class="number">1</span>];        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; points.length; i++) {            <span class="keyword">if</span> (points[i][<span class="number">0</span>] &lt;= end) {                <span class="keyword">continue</span>;            }            cnt++;            end = points[i][<span class="number">1</span>];        }        <span class="keyword">return</span> cnt;    }}</code></pre><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度： O(N*logN)</p></li><li><p>空间复杂度： O(1)</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;用最少数量的箭引爆气球&quot;&gt;&lt;a href=&quot;#用最少数量的箭引爆气球&quot; class=&quot;headerlink&quot; title=&quot;用最少数量的箭引爆气球&quot;&gt;&lt;/a&gt;用最少数量的箭引爆气球&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-cn-452-用最少数量的箭引爆气球&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。由于它是水平的，所以y坐标并不重要，因此只要知道开始和结束的x坐标就足够了。开始坐标总是小于结束坐标。平面内最多存在104个气球。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="贪心思想" scheme="https://jelly54.github.io/tags/%E8%B4%AA%E5%BF%83%E6%80%9D%E6%83%B3/"/>
    
      <category term="不重叠区间" scheme="https://jelly54.github.io/tags/%E4%B8%8D%E9%87%8D%E5%8F%A0%E5%8C%BA%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-455-分发饼干</title>
    <link href="https://jelly54.github.io/2018/11/13/LeetCode-455-%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2/"/>
    <id>https://jelly54.github.io/2018/11/13/LeetCode-455-分发饼干/</id>
    <published>2018-11-13T07:05:05.000Z</published>
    <updated>2018-11-13T08:36:18.733Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分发饼干"><a href="#分发饼干" class="headerlink" title="分发饼干"></a>分发饼干</h1><p><a href="347-前K个高频元素">LeetCode-cn-455-分发饼干</a></p><blockquote><p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。对每个孩子 i ，都有一个胃口值 gi ，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j ，都有一个尺寸 sj 。如果 sj &gt;= gi ，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p></blockquote><a id="more"></a><p><strong>注意：</strong>  </p><p style="text-indent: 2em">你可以假设胃口值为正。</p><br><p style="text-indent: 2em">一个小朋友最多只能拥有一块饼干。</p><p><strong>示例 1:</strong>  </p><ul><li>输入: [1,2,3], [1,1]</li><li>输出: 1</li></ul><p><strong>解释: </strong><br>你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。<br>虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。<br>所以你应该输出1。  </p><p><strong>示例 2:</strong>  </p><ul><li>输入: [1,2], [1,2,3]</li><li>输出: 2</li></ul><p><strong>解释: </strong><br>你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。<br>你拥有的饼干数量和尺寸都足以让所有孩子满足。<br>所以你应该输出2.  </p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：贪心思想"><a href="#方法一：贪心思想" class="headerlink" title="方法一：贪心思想"></a>方法一：贪心思想</h3><blockquote><p><strong>题目描述：</strong> 每个孩子都有一个满足度，每个饼干都有一个大小，只有饼干的大小大于等于一个孩子的满足度，该孩子才会获得满足。求解最多可以获得满足的孩子数量。</p><p>给一个孩子的饼干 <strong>应当尽量小又能满足该孩子</strong> ，这样大饼干就能拿来给满足度比较大的孩子。 <strong>因为最小的孩子最容易得到满足</strong> ，所以先满足最小的孩子。</p><p><strong>证明：</strong> 假设在某次选择中，<strong>贪心策略选择给当前满足度最小的孩子分配第 m 个饼干，第 m 个饼干为可以满足该孩子的最小饼干。</strong> 假设 <strong>存在一种最优策略，给该孩子分配第 n 个饼干，并且 m &lt; n。</strong> 我们可以发现，经过这一轮分配，<strong>贪心策略分配后剩下的饼干一定有一个比最优策略来得大。</strong> 因此在后续的分配中，<strong>贪心策略一定能满足更多的孩子。</strong><br>也就是说不存在比贪心策略更优的策略，即贪心策略就是最优策略。  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findContentChildren</span><span class="params">(<span class="keyword">int</span>[] g, <span class="keyword">int</span>[] s)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(g);</span><br><span class="line">        Arrays.sort(s);</span><br><span class="line">        <span class="keyword">int</span> gi = <span class="number">0</span>, si = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(gi &lt; g.length &amp;&amp; si &lt; s.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(g[gi] &lt;= s[si])&#123;</span><br><span class="line">                gi++;</span><br><span class="line">            &#125;</span><br><span class="line">            si++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> gi;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度： O(N*logN)</p></li><li><p>空间复杂度： O(1)</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;分发饼干&quot;&gt;&lt;a href=&quot;#分发饼干&quot; class=&quot;headerlink&quot; title=&quot;分发饼干&quot;&gt;&lt;/a&gt;分发饼干&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;347-前K个高频元素&quot;&gt;LeetCode-cn-455-分发饼干&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。对每个孩子 i ，都有一个胃口值 gi ，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j ，都有一个尺寸 sj 。如果 sj &amp;gt;= gi ，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="贪心思想" scheme="https://jelly54.github.io/tags/%E8%B4%AA%E5%BF%83%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-75-颜色分类</title>
    <link href="https://jelly54.github.io/2018/11/13/LeetCode-075-%E9%A2%9C%E8%89%B2%E5%88%86%E7%B1%BB/"/>
    <id>https://jelly54.github.io/2018/11/13/LeetCode-075-颜色分类/</id>
    <published>2018-11-13T06:44:11.000Z</published>
    <updated>2018-11-13T08:32:54.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="颜色分类"><a href="#颜色分类" class="headerlink" title="颜色分类"></a>颜色分类</h1><p><a href="https://leetcode-cn.com/problems/sort-colors/" target="_blank" rel="noopener">LeetCode-cn-75-颜色分类</a></p><blockquote><p>给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p><p>此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。</p></blockquote><a id="more"></a><p><strong>注意:</strong><br><strong>不能使用代码库中的排序函数来解决这道题。</strong></p><p><strong>示例:</strong>  </p><ul><li>输入: [2,0,2,1,1,0]</li><li>输出: [0,0,1,1,2,2]</li></ul><p><strong>进阶：</strong>  </p><blockquote><p>一个直观的解决方案是使用计数排序的两趟扫描算法。<br>首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。<br>你能想出一个仅使用常数空间的一趟扫描算法吗？</p></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：partition"><a href="#方法一：partition" class="headerlink" title="方法一：partition"></a>方法一：partition</h3><blockquote><p>看完题目，发现与荷兰国旗的分组的问题类似，将数组中的数据按照0,1,2 分成三组，大于1 的放右边；小于1 的放在左边；等于1 的放在中间。因此，可以确定如何实现。</p></blockquote><blockquote><p><strong>PS:</strong>  如果 <strong>允许直接调用系统排序的方法</strong> ，那么只需要一句话即可：<strong>Arrays.sort(nums);</strong> </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> less = -<span class="number">1</span>, more = nums.length, cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur &lt; more)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[cur] == <span class="number">0</span>)</span><br><span class="line">                swap(nums, ++less, cur++);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[cur] == <span class="number">2</span>)</span><br><span class="line">                swap(nums, --more, cur);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cur++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t = nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：O(n)</p></li><li><p>空间复杂度：O(1)</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;颜色分类&quot;&gt;&lt;a href=&quot;#颜色分类&quot; class=&quot;headerlink&quot; title=&quot;颜色分类&quot;&gt;&lt;/a&gt;颜色分类&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/sort-colors/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-cn-75-颜色分类&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。&lt;/p&gt;
&lt;p&gt;此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="https://jelly54.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="快速排序" scheme="https://jelly54.github.io/tags/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-451-根据字符出现频率排序</title>
    <link href="https://jelly54.github.io/2018/11/11/LeetCode-451-%E6%A0%B9%E6%8D%AE%E5%AD%97%E7%AC%A6%E5%87%BA%E7%8E%B0%E9%A2%91%E7%8E%87%E6%8E%92%E5%BA%8F/"/>
    <id>https://jelly54.github.io/2018/11/11/LeetCode-451-根据字符出现频率排序/</id>
    <published>2018-11-11T14:16:27.000Z</published>
    <updated>2018-11-19T07:02:19.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="根据字符出现频率排序"><a href="#根据字符出现频率排序" class="headerlink" title="根据字符出现频率排序"></a>根据字符出现频率排序</h1><p><a href="https://leetcode-cn.com/problems/sort-characters-by-frequency/" target="_blank" rel="noopener">LeetCode-cn-451-根据字符出现频率排序</a></p><blockquote><p>给定一个字符串，请将字符串里的字符按照出现的频率降序排列。</p></blockquote><a id="more"></a><p><strong>示例 1:</strong></p><ul><li>输入: “tree”</li><li>输出: “eert”</li><li><strong>解释:</strong>  ‘e’出现两次，’r’和’t’都只出现一次。因此’e’必须出现在’r’和’t’之前。此外，”eetr”也是一个有效的答案。</li></ul><p><strong>示例 2:</strong></p><ul><li>输入: “cccaaa”</li><li>输出: “cccaaa”</li><li><strong>解释:</strong>  ‘c’和’a’都出现三次。此外，”aaaccc”也是有效的答案。</li></ul><p><strong>注意</strong></p><p style="text-indent: 2em">“cacaca”是不正确的，因为相同的字母必须放在一起。</p><p><strong>示例 3:</strong></p><ul><li>输入: “Aabb”</li><li>输出: “bbAa”</li><li><strong>解释:</strong>  此外，”bbaA”也是一个有效的答案，但”Aabb”是不正确的。</li></ul><p><strong>注意</strong></p><p style="text-indent: 2em">‘A’和’a’被认为是两种不同的字符。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：桶排序"><a href="#方法一：桶排序" class="headerlink" title="方法一：桶排序"></a>方法一：桶排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">frequencySort</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    Map&lt;Character, Integer&gt; frequencyForNum = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : s.toCharArray())</span><br><span class="line">        frequencyForNum.put(c, frequencyForNum.getOrDefault(c, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Character&gt;[] frequencyBucket = <span class="keyword">new</span> ArrayList[s.length() + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : frequencyForNum.keySet()) &#123;</span><br><span class="line">        <span class="keyword">int</span> f = frequencyForNum.get(c);</span><br><span class="line">        <span class="keyword">if</span> (frequencyBucket[f] == <span class="keyword">null</span>) &#123;</span><br><span class="line">            frequencyBucket[f] = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        frequencyBucket[f].add(c);</span><br><span class="line">    &#125;</span><br><span class="line">    StringBuilder str = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = frequencyBucket.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (frequencyBucket[i] == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : frequencyBucket[i]) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                str.append(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：O()</p></li><li><p>空间复杂度：O()</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;根据字符出现频率排序&quot;&gt;&lt;a href=&quot;#根据字符出现频率排序&quot; class=&quot;headerlink&quot; title=&quot;根据字符出现频率排序&quot;&gt;&lt;/a&gt;根据字符出现频率排序&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/sort-characters-by-frequency/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-cn-451-根据字符出现频率排序&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个字符串，请将字符串里的字符按照出现的频率降序排列。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="https://jelly54.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="桶排序" scheme="https://jelly54.github.io/tags/%E6%A1%B6%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-347-前K个高频元素</title>
    <link href="https://jelly54.github.io/2018/11/11/LeetCode-347-%E5%89%8DK%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0/"/>
    <id>https://jelly54.github.io/2018/11/11/LeetCode-347-前K个高频元素/</id>
    <published>2018-11-11T14:00:28.000Z</published>
    <updated>2018-11-13T08:37:30.588Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前K个高频元素"><a href="#前K个高频元素" class="headerlink" title="前K个高频元素"></a>前K个高频元素</h1><p><a href="https://leetcode-cn.com/problems/top-k-frequent-elements/" target="_blank" rel="noopener">LeetCode-cn-347-前K个高频元素</a></p><blockquote><p>给定一个非空的整数数组，返回其中出现频率前 k 高的元素。</p></blockquote><a id="more"></a><p><strong>示例 1:</strong>  </p><ul><li>输入: nums = [1,1,1,2,2,3], k = 2</li><li>输出: [1,2]</li></ul><p><strong>示例 2:</strong>  </p><ul><li>输入: nums = [1], k = 1</li><li>输出: [1]</li></ul><p><strong>说明：</strong>  </p><p style="text-indent: 2em">你可以假设给定的 k 总是合理的，且 1 ≤ k ≤ 数组中不相同的元素的个数。<br><br>你的算法的时间复杂度必须优于 O(n log n) , n 数组的大小。</p>  <h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：桶排序"><a href="#方法一：桶排序" class="headerlink" title="方法一：桶排序"></a>方法一：桶排序</h3><blockquote><p>设置若干个桶，每个桶存储出现频率相同的数，并且桶的下标代表桶中数出现的频率，即第 i 个桶中存储的数出现的频率为 i。</p><p>把数都放到桶之后，从后向前遍历桶，最先得到的 k 个数就是出现频率最多的的 k 个数。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">topKFrequent</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; frequencyForNum = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">        frequencyForNum.put(num, frequencyForNum.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Integer&gt;[] buckets = <span class="keyword">new</span> ArrayList[nums.length + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> key : frequencyForNum.keySet()) &#123;</span><br><span class="line">        <span class="keyword">int</span> frequency = frequencyForNum.get(key);</span><br><span class="line">        <span class="keyword">if</span> (buckets[frequency] == <span class="keyword">null</span>) &#123;</span><br><span class="line">            buckets[frequency] = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        buckets[frequency].add(key);</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Integer&gt; topK = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = buckets.length - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; topK.size() &lt; k; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (buckets[i] != <span class="keyword">null</span>) &#123;</span><br><span class="line">            topK.addAll(buckets[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> topK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：O(1)</p></li><li><p>空间复杂度：O(n), n为数组的大小</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前K个高频元素&quot;&gt;&lt;a href=&quot;#前K个高频元素&quot; class=&quot;headerlink&quot; title=&quot;前K个高频元素&quot;&gt;&lt;/a&gt;前K个高频元素&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/top-k-frequent-elements/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-cn-347-前K个高频元素&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个非空的整数数组，返回其中出现频率前 k 高的元素。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="https://jelly54.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="桶排序" scheme="https://jelly54.github.io/tags/%E6%A1%B6%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-215-数组中的第K大的元素</title>
    <link href="https://jelly54.github.io/2018/11/09/LeetCode-215-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACK%E5%A4%A7%E7%9A%84%E5%85%83%E7%B4%A0/"/>
    <id>https://jelly54.github.io/2018/11/09/LeetCode-215-数组中的第K大的元素/</id>
    <published>2018-11-09T08:55:51.000Z</published>
    <updated>2018-11-13T08:27:41.779Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组中的第K大的元素"><a href="#数组中的第K大的元素" class="headerlink" title="数组中的第K大的元素"></a>数组中的第K大的元素</h1><p><a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array/" target="_blank" rel="noopener">LeetCode-cn-215-数组中的第K大的元素</a></p><blockquote><p>在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。</p></blockquote><a id="more"></a><p><strong>示例 1:</strong>  </p><ul><li>输入: [3,2,1,5,6,4] 和 k = 2</li><li>输出: 5</li></ul><p><strong>示例 2:</strong>  </p><ul><li>输入: [3,2,3,1,2,4,5,5,6] 和 k = 4</li><li>输出: 4</li></ul><p><strong>说明:</strong>  </p><p style="text-indent: 2em">你可以假设 k 总是有效的，且 1 ≤ k ≤ 数组的长度。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote><p>给定的数组是无序的，要想拿到第K个大的数据，先要将数组排序，在获取数组的 nums。length - k 位置的数据即可。</p></blockquote><h3 id="方法一：利用数组自带的排序"><a href="#方法一：利用数组自带的排序" class="headerlink" title="方法一：利用数组自带的排序"></a>方法一：利用数组自带的排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="keyword">return</span> nums[nums.length - k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度 O(NlogN)</p></li><li><p>空间复杂度 O(1)</p></li></ul><p><br></p><h3 id="方法二：堆排序"><a href="#方法二：堆排序" class="headerlink" title="方法二：堆排序"></a>方法二：堆排序</h3><blockquote><p>维持一个最大堆，name堆顶的元素将是最大的。将数据存入堆中，控制堆的大小为k，最后peek()一下就是第k大的数据。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    PriorityQueue&lt;Integer&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;(); <span class="comment">// 小顶堆</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> val : nums) &#123;</span><br><span class="line">        pq.add(val);</span><br><span class="line">        <span class="keyword">if</span> (pq.size() &gt; k)  <span class="comment">// 维护堆的大小为 K</span></span><br><span class="line">            pq.poll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pq.peek();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度 O(NlogK)</p></li><li><p>空间复杂度 O(K)。</p></li></ul><p><br></p><h3 id="方法三：-快速选择"><a href="#方法三：-快速选择" class="headerlink" title="方法三： 快速选择"></a>方法三： 快速选择</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    k = nums.length - k;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, h = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; h) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = partition(nums, l, h);</span><br><span class="line">        <span class="keyword">if</span> (j == k) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &lt; k) &#123;</span><br><span class="line">            l = j + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            h = j - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> l, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = l, j = h + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (a[++i] &lt; a[l] &amp;&amp; i &lt; h) ;</span><br><span class="line">        <span class="keyword">while</span> (a[--j] &gt; a[l] &amp;&amp; j &gt; l) ;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= j) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(a, i, j);</span><br><span class="line">    &#125;</span><br><span class="line">    swap(a, l, j);</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = a[i];</span><br><span class="line">    a[i] = a[j];</span><br><span class="line">    a[j] = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度 O(N)</p></li><li><p>空间复杂度 O(1)</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数组中的第K大的元素&quot;&gt;&lt;a href=&quot;#数组中的第K大的元素&quot; class=&quot;headerlink&quot; title=&quot;数组中的第K大的元素&quot;&gt;&lt;/a&gt;数组中的第K大的元素&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/kth-largest-element-in-an-array/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-cn-215-数组中的第K大的元素&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="https://jelly54.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="堆排序" scheme="https://jelly54.github.io/tags/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    
      <category term="快速选择" scheme="https://jelly54.github.io/tags/%E5%BF%AB%E9%80%9F%E9%80%89%E6%8B%A9/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-633-平方数之和</title>
    <link href="https://jelly54.github.io/2018/11/09/LeetCode-633-%E5%B9%B3%E6%96%B9%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>https://jelly54.github.io/2018/11/09/LeetCode-633-平方数之和/</id>
    <published>2018-11-09T06:17:58.000Z</published>
    <updated>2018-11-13T08:38:00.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="平方数之和"><a href="#平方数之和" class="headerlink" title="平方数之和"></a>平方数之和</h1><p><a href="https://leetcode-cn.com/problems/sum-of-square-numbers/" target="_blank" rel="noopener">LeetCode-cn-633-平方数之和</a></p><blockquote><p>给定一个非负整数 c ，你要判断是否存在两个整数 a 和 b，使得 a^2 + b^2 = c。</p></blockquote><a id="more"></a><p><strong>示例1:</strong></p><ul><li>输入: 5</li><li>输出: True</li><li><strong>解释:</strong>  1 <em> 1 + 2 </em> 2 = 5</li></ul><p><strong>示例2:</strong> </p><ul><li>输入: 3</li><li>输出: False</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：-两个指针"><a href="#方法一：-两个指针" class="headerlink" title="方法一： 两个指针"></a>方法一： 两个指针</h3><blockquote><p>一个数如果可以是另外两个数的平方和，那么这两个数必定都比这个书的开方后的值小。</p><p>因此，我们可以定义两个变量，一个从 0 开始，一个从Math.sqrt(c)) 开始。</p><p>将两数平方和 与 该数进行比较，若大于该数，则后指针减一;若小于该数，前指针加一。直到找见 与该数相等，返回</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">judgeSquareSum</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = (<span class="keyword">int</span>)Math.sqrt(c);</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= j)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = i*i + j*j;</span><br><span class="line">            <span class="keyword">if</span>(sum == c)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum &gt; c)&#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：O(N)</p></li><li><p>空间复杂度：O(1)</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;平方数之和&quot;&gt;&lt;a href=&quot;#平方数之和&quot; class=&quot;headerlink&quot; title=&quot;平方数之和&quot;&gt;&lt;/a&gt;平方数之和&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/sum-of-square-numbers/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-cn-633-平方数之和&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个非负整数 c ，你要判断是否存在两个整数 a 和 b，使得 a^2 + b^2 = c。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="双指针" scheme="https://jelly54.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-688-验证回文字符串2</title>
    <link href="https://jelly54.github.io/2018/11/08/LeetCode-680-%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://jelly54.github.io/2018/11/08/LeetCode-680-验证回文字符串/</id>
    <published>2018-11-08T14:26:26.000Z</published>
    <updated>2018-11-13T08:38:26.012Z</updated>
    
    <content type="html"><![CDATA[<h1 id="验证回文字符串2"><a href="#验证回文字符串2" class="headerlink" title="验证回文字符串2"></a>验证回文字符串2</h1><p><a href="https://leetcode-cn.com/problems/valid-palindrome-ii/" target="_blank" rel="noopener">LeetCode-cn-688-验证回文字符串2</a></p><blockquote><p>给定一个非空字符串 s，最多删除一个字符。判断是否能成为回文字符串。</p></blockquote><a id="more"></a><p><strong>示例 1:</strong>  </p><ul><li>输入: “aba”</li><li>输出: True</li></ul><p><strong>示例 2:</strong>  </p><ul><li>输入: “abca”</li><li>输出: True</li><li><strong>解释:</strong>  你可以删除c字符。</li></ul><p><strong>注意:</strong> </p><p style="text-indent: 2em">字符串只包含从 a-z 的小写字母。字符串的最大长度是50000。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：双指针"><a href="#方法一：双指针" class="headerlink" title="方法一：双指针"></a>方法一：双指针</h3><blockquote><p>从string的，头和尾进行比较。如果两两相等。返回true；否则，如果遇见不相等的，则，前指针加一后指针不变，或者，后指针减一，前指针不变，继续判断是不是回文，如果两个有一个后边全是回文，则该string可以 经过删除零个或一个字符，构成回文。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = -<span class="number">1</span>, j = s.length();</span><br><span class="line">        <span class="keyword">while</span>(++i &lt; --j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i) != s.charAt(j))&#123;</span><br><span class="line">                <span class="keyword">return</span> isPalindrom(s, i, j - <span class="number">1</span>) || isPalindrom(s, i+<span class="number">1</span>, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isPalindrom</span><span class="params">(String s, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i++) != s.charAt(j--))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：O(N)</p></li><li><p>空间复杂度：O(1)</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;验证回文字符串2&quot;&gt;&lt;a href=&quot;#验证回文字符串2&quot; class=&quot;headerlink&quot; title=&quot;验证回文字符串2&quot;&gt;&lt;/a&gt;验证回文字符串2&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/valid-palindrome-ii/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-cn-688-验证回文字符串2&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个非空字符串 s，最多删除一个字符。判断是否能成为回文字符串。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="双指针" scheme="https://jelly54.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-141-判断链表是否有环</title>
    <link href="https://jelly54.github.io/2018/11/08/LeetCode-141-%E5%88%A4%E6%96%AD%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E6%9C%89%E7%8E%AF/"/>
    <id>https://jelly54.github.io/2018/11/08/LeetCode-141-判断链表是否有环/</id>
    <published>2018-11-08T14:26:07.000Z</published>
    <updated>2018-11-13T08:26:30.412Z</updated>
    
    <content type="html"><![CDATA[<h1 id="判断环形链表"><a href="#判断环形链表" class="headerlink" title="判断环形链表"></a>判断环形链表</h1><p><a href="https://leetcode-cn.com/problems/linked-list-cycle/" target="_blank" rel="noopener">LeetCode-cn-141-判断链表是否有环</a></p><blockquote><p>给定一个链表，判断链表中是否有环。</p></blockquote><a id="more"></a><p><strong>进阶：</strong><br>你能否不使用额外空间解决此题？</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：双指针"><a href="#方法一：双指针" class="headerlink" title="方法一：双指针"></a>方法一：双指针</h3><blockquote><p>使用双指针，一个指针每次移动一个节点，一个指针每次移动两个节点，如果存在环，那么这两个指针一定会相遇。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        ListNode l1 = head, l2 = head.next;</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="keyword">null</span> &amp;&amp;l2 != <span class="keyword">null</span> &amp;&amp; l2.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l1 == l2)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">            l2 = l2.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：O(N)</p></li><li><p>空间复杂度：O(1)</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;判断环形链表&quot;&gt;&lt;a href=&quot;#判断环形链表&quot; class=&quot;headerlink&quot; title=&quot;判断环形链表&quot;&gt;&lt;/a&gt;判断环形链表&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/linked-list-cycle/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-cn-141-判断链表是否有环&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个链表，判断链表中是否有环。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="双指针" scheme="https://jelly54.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-345-反转字符串中的元音字母</title>
    <link href="https://jelly54.github.io/2018/11/08/LeetCode-345-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%85%83%E9%9F%B3%E5%AD%97%E6%AF%8D/"/>
    <id>https://jelly54.github.io/2018/11/08/LeetCode-345-反转字符串中的元音字母/</id>
    <published>2018-11-08T14:25:05.000Z</published>
    <updated>2018-11-13T08:37:00.294Z</updated>
    
    <content type="html"><![CDATA[<h1 id="反转字符串中的元音字母"><a href="#反转字符串中的元音字母" class="headerlink" title="反转字符串中的元音字母"></a>反转字符串中的元音字母</h1><p><a href="https://leetcode-cn.com/problems/reverse-vowels-of-a-string/" target="_blank" rel="noopener">LeetCode-cn-345-反转字符串中的元音字母</a></p><blockquote><p>编写一个函数，以字符串作为输入，反转该字符串中的元音字母。</p></blockquote><a id="more"></a><p><strong>示例 1:</strong> </p><ul><li>输入: “hello”</li><li>输出: “holle”</li></ul><p><strong>示例 2:</strong>  </p><ul><li>输入: “leetcode”</li><li>输出: “leotcede”</li><li><strong>说明:</strong>  元音字母不包含字母”y”。</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一-双指针"><a href="#方法一-双指针" class="headerlink" title="方法一 双指针"></a>方法一 双指针</h3><blockquote><p>使用双指针指向待反转的两个元音字符，一个指针从头向尾遍历，一个指针从尾到头遍历。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> HashSet&lt;Character&gt; vowels = <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(<span class="string">'a'</span>, <span class="string">'e'</span>, <span class="string">'i'</span>, <span class="string">'o'</span>, <span class="string">'u'</span>, <span class="string">'A'</span>, <span class="string">'E'</span>, <span class="string">'I'</span>, <span class="string">'O'</span>, <span class="string">'U'</span>));</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseVowels</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = s.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">char</span>[] result = <span class="keyword">new</span> <span class="keyword">char</span>[s.length()];</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">            <span class="keyword">char</span> ci = s.charAt(i);</span><br><span class="line">            <span class="keyword">char</span> cj = s.charAt(j);</span><br><span class="line">            <span class="keyword">if</span> (!vowels.contains(ci)) &#123;</span><br><span class="line">                result[i++] = ci;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!vowels.contains(cj)) &#123;</span><br><span class="line">                result[j--] = cj;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result[i++] = cj;</span><br><span class="line">                result[j--] = ci;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：O(N)</p></li><li><p>空间复杂度：O(1)</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;反转字符串中的元音字母&quot;&gt;&lt;a href=&quot;#反转字符串中的元音字母&quot; class=&quot;headerlink&quot; title=&quot;反转字符串中的元音字母&quot;&gt;&lt;/a&gt;反转字符串中的元音字母&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/reverse-vowels-of-a-string/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-cn-345-反转字符串中的元音字母&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;编写一个函数，以字符串作为输入，反转该字符串中的元音字母。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="双指针" scheme="https://jelly54.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-167-两数之和2-输入有序数组</title>
    <link href="https://jelly54.github.io/2018/10/22/LeetCode-167-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C2-%E8%BE%93%E5%85%A5%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <id>https://jelly54.github.io/2018/10/22/LeetCode-167-两数之和2-输入有序数组/</id>
    <published>2018-10-22T05:59:18.000Z</published>
    <updated>2018-11-13T08:27:03.833Z</updated>
    
    <content type="html"><![CDATA[<h1 id="两数之和2-输入有序数组"><a href="#两数之和2-输入有序数组" class="headerlink" title="两数之和2-输入有序数组"></a>两数之和2-输入有序数组</h1><p><a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/" target="_blank" rel="noopener">LeetCode-cn-167-两数之和2-输入有序数组</a></p><blockquote><p>给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。<br>函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。</p></blockquote><a id="more"></a><p><strong>说明:</strong>  </p><blockquote><p>返回的下标值（index1 和 index2）不是从零开始的。<br>你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。</p></blockquote><p><strong>示例:</strong>  </p><ul><li>输入: numbers = [2, 7, 11, 15], target = 9</li><li>输出: [1,2]</li><li><strong>解释:</strong>  2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：双指针"><a href="#方法一：双指针" class="headerlink" title="方法一：双指针"></a>方法一：双指针</h3><blockquote><p>使用双指针，一个指针指向值较小的元素，一个指针指向值较大的元素。指向较小元素的指针从头向尾遍历，指向较大元素的指针从尾向头遍历。</p></blockquote><ul><li>如果两个指针指向元素的和 sum == target，那么得到要求的结果；</li><li>如果 sum &gt; target，移动较大的元素，使 sum 变小一些；</li><li>如果 sum &lt; target，移动较小的元素，使 sum 变大一些。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = numbers.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = numbers[i] + numbers[j];</span><br><span class="line">            <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i + <span class="number">1</span>, j + <span class="number">1</span>&#125;;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：O(N)。双指针，从数组的两边开始，只遍历一次。</p></li><li><p>空间复杂度：O(1)。在原地操作没有使用额外空间。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;两数之和2-输入有序数组&quot;&gt;&lt;a href=&quot;#两数之和2-输入有序数组&quot; class=&quot;headerlink&quot; title=&quot;两数之和2-输入有序数组&quot;&gt;&lt;/a&gt;两数之和2-输入有序数组&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-cn-167-两数之和2-输入有序数组&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。&lt;br&gt;函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://jelly54.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelly54.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="双指针" scheme="https://jelly54.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
</feed>
